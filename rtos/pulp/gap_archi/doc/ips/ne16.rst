Input file: fe/ips/ne16/docs/ne16.md

Register map
^^^^^^^^^^^^


Overview
""""""""

.. table:: 

    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |                      Name                      |Offset|Width|                                                                Description                                                                 |
    +================================================+======+=====+============================================================================================================================================+
    |:ref:`TRIGGER<ne16_TRIGGER>`                    |     0|   32|Write 0 to start execution, unlock controller.                                                                                              |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`ACQUIRE<ne16_ACQUIRE>`                    |     4|   32|On read starts a job offload, locks controller. Returns job ID.                                                                             |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`FINISHED_JOBS<ne16_FINISHED_JOBS>`        |     8|   32|Returns number of completed jobs.                                                                                                           |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`STATUS<ne16_STATUS>`                      |    12|   32|Returns status of jobs in the queue (each byte is a different job).                                                                         |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`RUNNING_JOB<ne16_RUNNING_JOB>`            |    16|   32|Returns ID of currently running job.                                                                                                        |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`SOFT_CLEAR<ne16_SOFT_CLEAR>`              |    20|   32|Soft-clears the NE16 at any write.                                                                                                          |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`MICROCODE<ne16_MICROCODE>`                |    24|   32|Reserved.                                                                                                                                   |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`SW_SYNC<ne16_SW_SYNC>`                    |    28|   32|Triggers a SW event inside NE16 (e.g. for DMA synchronization).                                                                             |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`WEIGHTS_PTR<ne16_WEIGHTS_PTR>`            |    32|   32|Pointer to Weights tensor in memory (d3=Ko, d2=KiMaj, d1=Qw, d0=Fx<em>Fy</em>Kimin for 3x3 mode; d2=Ko, d1=KiMaj, d0=Qw*KiMin for 1x1 mode).|
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`INFEAT_PTR<ne16_INFEAT_PTR>`              |    36|   32|Pointer to InFeat tensor in memory (d2=Hi, d1=Wi, d0=Ki).                                                                                   |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`OUTFEAT_PTR<ne16_OUTFEAT_PTR>`            |    40|   32|Pointer to OutFeat tensor in memory (d2=Ho, d1=Wo, d0=Ko).                                                                                  |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`SCALE_PTR<ne16_SCALE_PTR>`                |    44|   32|Pointer to Scale parameters in memory (d0=Ko).                                                                                              |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`SCALE_SHIFT_PTR<ne16_SCALE_SHIFT_PTR>`    |    48|   32|Pointer to Scale parameters in memory (d0=Ko).                                                                                              |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`SCALE_BIAS_PTR<ne16_SCALE_BIAS_PTR>`      |    52|   32|Pointer to Scale parameters in memory (d0=Ko).                                                                                              |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`INFEAT_D0_STRIDE<ne16_INFEAT_D0_STRIDE>`  |    56|   32|                                                                                                                                            |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`INFEAT_D1_STRIDE<ne16_INFEAT_D1_STRIDE>`  |    60|   32|                                                                                                                                            |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`INFEAT_D2_STRIDE<ne16_INFEAT_D2_STRIDE>`  |    64|   32|                                                                                                                                            |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`OUTFEAT_D0_STRIDE<ne16_OUTFEAT_D0_STRIDE>`|    68|   32|                                                                                                                                            |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`OUTFEAT_D1_STRIDE<ne16_OUTFEAT_D1_STRIDE>`|    72|   32|                                                                                                                                            |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`OUTFEAT_D2_STRIDE<ne16_OUTFEAT_D2_STRIDE>`|    76|   32|                                                                                                                                            |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`WEIGHTS_D0_STRIDE<ne16_WEIGHTS_D0_STRIDE>`|    80|   32|                                                                                                                                            |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`WEIGHTS_D1_STRIDE<ne16_WEIGHTS_D1_STRIDE>`|    84|   32|                                                                                                                                            |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`WEIGHTS_D2_STRIDE<ne16_WEIGHTS_D2_STRIDE>`|    88|   32|                                                                                                                                            |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`SUBTILE_REM0<ne16_SUBTILE_REM0>`          |    92|   32|                                                                                                                                            |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`SUBTILE_REM1<ne16_SUBTILE_REM1>`          |    96|   32|                                                                                                                                            |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`SUBTILE_REM2<ne16_SUBTILE_REM2>`          |   100|   32|                                                                                                                                            |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`SUBTILE_NB0<ne16_SUBTILE_NB0>`            |   104|   32|                                                                                                                                            |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`SUBTILE_NB1<ne16_SUBTILE_NB1>`            |   108|   32|                                                                                                                                            |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`PADDING<ne16_PADDING>`                    |   112|   32|                                                                                                                                            |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`WEIGHT_OFFSET<ne16_WEIGHT_OFFSET>`        |   116|   32|                                                                                                                                            |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`FILTER_MASK<ne16_FILTER_MASK>`            |   120|   32|                                                                                                                                            |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+
    |:ref:`CONFIG0<ne16_CONFIG0>`                    |   124|   32|                                                                                                                                            |
    +------------------------------------------------+------+-----+--------------------------------------------------------------------------------------------------------------------------------------------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                // Write 0 to start execution, unlock controller.
                #define NE16_TRIGGER_OFFSET                      0x0
        
                // On read starts a job offload, locks controller. Returns job ID.
                #define NE16_ACQUIRE_OFFSET                      0x4
        
                // Returns number of completed jobs.
                #define NE16_FINISHED_JOBS_OFFSET                0x8
        
                // Returns status of jobs in the queue (each byte is a different job).
                #define NE16_STATUS_OFFSET                       0xc
        
                // Returns ID of currently running job.
                #define NE16_RUNNING_JOB_OFFSET                  0x10
        
                // Soft-clears the NE16 at any write.
                #define NE16_SOFT_CLEAR_OFFSET                   0x14
        
                // Reserved.
                #define NE16_MICROCODE_OFFSET                    0x18
        
                // Triggers a SW event inside NE16 (e.g. for DMA synchronization).
                #define NE16_SW_SYNC_OFFSET                      0x1c
        
                // Pointer to Weights tensor in memory (d3=Ko, d2=KiMaj, d1=Qw, d0=Fx<em>Fy</em>Kimin for 3x3 mode; d2=Ko, d1=KiMaj, d0=Qw*KiMin for 1x1 mode).
                #define NE16_WEIGHTS_PTR_OFFSET                  0x20
        
                // Pointer to InFeat tensor in memory (d2=Hi, d1=Wi, d0=Ki).
                #define NE16_INFEAT_PTR_OFFSET                   0x24
        
                // Pointer to OutFeat tensor in memory (d2=Ho, d1=Wo, d0=Ko).
                #define NE16_OUTFEAT_PTR_OFFSET                  0x28
        
                // Pointer to Scale parameters in memory (d0=Ko).
                #define NE16_SCALE_PTR_OFFSET                    0x2c
        
                // Pointer to Scale parameters in memory (d0=Ko).
                #define NE16_SCALE_SHIFT_PTR_OFFSET              0x30
        
                // Pointer to Scale parameters in memory (d0=Ko).
                #define NE16_SCALE_BIAS_PTR_OFFSET               0x34
        
                #define NE16_INFEAT_D0_STRIDE_OFFSET             0x38
        
                #define NE16_INFEAT_D1_STRIDE_OFFSET             0x3c
        
                #define NE16_INFEAT_D2_STRIDE_OFFSET             0x40
        
                #define NE16_OUTFEAT_D0_STRIDE_OFFSET            0x44
        
                #define NE16_OUTFEAT_D1_STRIDE_OFFSET            0x48
        
                #define NE16_OUTFEAT_D2_STRIDE_OFFSET            0x4c
        
                #define NE16_WEIGHTS_D0_STRIDE_OFFSET            0x50
        
                #define NE16_WEIGHTS_D1_STRIDE_OFFSET            0x54
        
                #define NE16_WEIGHTS_D2_STRIDE_OFFSET            0x58
        
                #define NE16_SUBTILE_REM0_OFFSET                 0x5c
        
                #define NE16_SUBTILE_REM1_OFFSET                 0x60
        
                #define NE16_SUBTILE_REM2_OFFSET                 0x64
        
                #define NE16_SUBTILE_NB0_OFFSET                  0x68
        
                #define NE16_SUBTILE_NB1_OFFSET                  0x6c
        
                #define NE16_PADDING_OFFSET                      0x70
        
                #define NE16_WEIGHT_OFFSET_OFFSET                0x74
        
                #define NE16_FILTER_MASK_OFFSET                  0x78
        
                //   
                #define NE16_CONFIG0_OFFSET                      0x7c

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_trigger_get(uint32_t base);
        static inline void ne16_trigger_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_acquire_get(uint32_t base);
        static inline void ne16_acquire_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_finished_jobs_get(uint32_t base);
        static inline void ne16_finished_jobs_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_status_get(uint32_t base);
        static inline void ne16_status_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_running_job_get(uint32_t base);
        static inline void ne16_running_job_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_soft_clear_get(uint32_t base);
        static inline void ne16_soft_clear_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_microcode_get(uint32_t base);
        static inline void ne16_microcode_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_sw_sync_get(uint32_t base);
        static inline void ne16_sw_sync_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_weights_ptr_get(uint32_t base);
        static inline void ne16_weights_ptr_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_infeat_ptr_get(uint32_t base);
        static inline void ne16_infeat_ptr_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_outfeat_ptr_get(uint32_t base);
        static inline void ne16_outfeat_ptr_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_scale_ptr_get(uint32_t base);
        static inline void ne16_scale_ptr_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_scale_shift_ptr_get(uint32_t base);
        static inline void ne16_scale_shift_ptr_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_scale_bias_ptr_get(uint32_t base);
        static inline void ne16_scale_bias_ptr_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_infeat_d0_stride_get(uint32_t base);
        static inline void ne16_infeat_d0_stride_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_infeat_d1_stride_get(uint32_t base);
        static inline void ne16_infeat_d1_stride_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_infeat_d2_stride_get(uint32_t base);
        static inline void ne16_infeat_d2_stride_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_outfeat_d0_stride_get(uint32_t base);
        static inline void ne16_outfeat_d0_stride_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_outfeat_d1_stride_get(uint32_t base);
        static inline void ne16_outfeat_d1_stride_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_outfeat_d2_stride_get(uint32_t base);
        static inline void ne16_outfeat_d2_stride_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_weights_d0_stride_get(uint32_t base);
        static inline void ne16_weights_d0_stride_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_weights_d1_stride_get(uint32_t base);
        static inline void ne16_weights_d1_stride_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_weights_d2_stride_get(uint32_t base);
        static inline void ne16_weights_d2_stride_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_subtile_rem0_get(uint32_t base);
        static inline void ne16_subtile_rem0_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_subtile_rem1_get(uint32_t base);
        static inline void ne16_subtile_rem1_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_subtile_rem2_get(uint32_t base);
        static inline void ne16_subtile_rem2_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_subtile_nb0_get(uint32_t base);
        static inline void ne16_subtile_nb0_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_subtile_nb1_get(uint32_t base);
        static inline void ne16_subtile_nb1_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_padding_get(uint32_t base);
        static inline void ne16_padding_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_weight_offset_get(uint32_t base);
        static inline void ne16_weight_offset_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_filter_mask_get(uint32_t base);
        static inline void ne16_filter_mask_set(uint32_t base, uint32_t value);

        static inline uint32_t ne16_config0_get(uint32_t base);
        static inline void ne16_config0_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c

        
        // Ki remainder. (access: R/W)
        #define NE16_SUBTILE_REM0_KI_BIT                                     0
        #define NE16_SUBTILE_REM0_KI_WIDTH                                   16
        #define NE16_SUBTILE_REM0_KI_MASK                                    0xffff
        #define NE16_SUBTILE_REM0_KI_RESET                                   0x0
        
        // Ko remainder. (access: R/W)
        #define NE16_SUBTILE_REM0_KO_BIT                                     16
        #define NE16_SUBTILE_REM0_KO_WIDTH                                   16
        #define NE16_SUBTILE_REM0_KO_MASK                                    0xffff0000
        #define NE16_SUBTILE_REM0_KO_RESET                                   0x0
        
        // Wo remainder. (access: R/W)
        #define NE16_SUBTILE_REM1_WO_BIT                                     0
        #define NE16_SUBTILE_REM1_WO_WIDTH                                   16
        #define NE16_SUBTILE_REM1_WO_MASK                                    0xffff
        #define NE16_SUBTILE_REM1_WO_RESET                                   0x0
        
        // Ho remainder. (access: R/W)
        #define NE16_SUBTILE_REM1_HO_BIT                                     16
        #define NE16_SUBTILE_REM1_HO_WIDTH                                   16
        #define NE16_SUBTILE_REM1_HO_MASK                                    0xffff0000
        #define NE16_SUBTILE_REM1_HO_RESET                                   0x0
        
        // Wi remainder. (access: R/W)
        #define NE16_SUBTILE_REM2_WI_BIT                                     0
        #define NE16_SUBTILE_REM2_WI_WIDTH                                   16
        #define NE16_SUBTILE_REM2_WI_MASK                                    0xffff
        #define NE16_SUBTILE_REM2_WI_RESET                                   0x0
        
        // Hi remainder. (access: R/W)
        #define NE16_SUBTILE_REM2_HI_BIT                                     16
        #define NE16_SUBTILE_REM2_HI_WIDTH                                   16
        #define NE16_SUBTILE_REM2_HI_MASK                                    0xffff0000
        #define NE16_SUBTILE_REM2_HI_RESET                                   0x0
        
        // Ki remainder. (access: R/W)
        #define NE16_SUBTILE_NB0_KI_BIT                                      0
        #define NE16_SUBTILE_NB0_KI_WIDTH                                    16
        #define NE16_SUBTILE_NB0_KI_MASK                                     0xffff
        #define NE16_SUBTILE_NB0_KI_RESET                                    0x0
        
        // Ko remainder. (access: R/W)
        #define NE16_SUBTILE_NB0_KO_BIT                                      16
        #define NE16_SUBTILE_NB0_KO_WIDTH                                    16
        #define NE16_SUBTILE_NB0_KO_MASK                                     0xffff0000
        #define NE16_SUBTILE_NB0_KO_RESET                                    0x0
        
        // Wo remainder. (access: R/W)
        #define NE16_SUBTILE_NB1_WO_BIT                                      0
        #define NE16_SUBTILE_NB1_WO_WIDTH                                    16
        #define NE16_SUBTILE_NB1_WO_MASK                                     0xffff
        #define NE16_SUBTILE_NB1_WO_RESET                                    0x0
        
        // Ho remainder. (access: R/W)
        #define NE16_SUBTILE_NB1_HO_BIT                                      16
        #define NE16_SUBTILE_NB1_HO_WIDTH                                    16
        #define NE16_SUBTILE_NB1_HO_MASK                                     0xffff0000
        #define NE16_SUBTILE_NB1_HO_RESET                                    0x0
        
        // Padding value. (access: R/W)
        #define NE16_PADDING_VALUE_BIT                                       0
        #define NE16_PADDING_VALUE_WIDTH                                     16
        #define NE16_PADDING_VALUE_MASK                                      0xffff
        #define NE16_PADDING_VALUE_RESET                                     0x0
        
        // Number of spatially padded pixels in the LEFT subtile border. (access: R/W)
        #define NE16_PADDING_LEFT_BIT                                        16
        #define NE16_PADDING_LEFT_WIDTH                                      4
        #define NE16_PADDING_LEFT_MASK                                       0xf0000
        #define NE16_PADDING_LEFT_RESET                                      0x0
        
        // Number of spatially padded pixels in the BOTTOM subtile border (counted from 5 pixels upward!). (access: R/W)
        #define NE16_PADDING_BOTTOM_BIT                                      20
        #define NE16_PADDING_BOTTOM_WIDTH                                    4
        #define NE16_PADDING_BOTTOM_MASK                                     0xf00000
        #define NE16_PADDING_BOTTOM_RESET                                    0x0
        
        // Number of spatially padded pixels in the RIGHT subtile border (counted from 5 pixels leftward!). (access: R/W)
        #define NE16_PADDING_RIGHT_BIT                                       24
        #define NE16_PADDING_RIGHT_WIDTH                                     4
        #define NE16_PADDING_RIGHT_MASK                                      0xf000000
        #define NE16_PADDING_RIGHT_RESET                                     0x0
        
        // Number of spatially padded pixels in the TOP subtile border. (access: R/W)
        #define NE16_PADDING_TOP_BIT                                         28
        #define NE16_PADDING_TOP_WIDTH                                       4
        #define NE16_PADDING_TOP_MASK                                        0xf0000000
        #define NE16_PADDING_TOP_RESET                                       0x0
        
        // Left mask. (access: R/W)
        #define NE16_FILTER_MASK_LEFT_BIT                                    0
        #define NE16_FILTER_MASK_LEFT_WIDTH                                  8
        #define NE16_FILTER_MASK_LEFT_MASK                                   0xff
        #define NE16_FILTER_MASK_LEFT_RESET                                  0x0
        
        // Bottom mask. (access: R/W)
        #define NE16_FILTER_MASK_BOTTOM_BIT                                  8
        #define NE16_FILTER_MASK_BOTTOM_WIDTH                                8
        #define NE16_FILTER_MASK_BOTTOM_MASK                                 0xff00
        #define NE16_FILTER_MASK_BOTTOM_RESET                                0x0
        
        // Right mask. (access: R/W)
        #define NE16_FILTER_MASK_RIGHT_BIT                                   16
        #define NE16_FILTER_MASK_RIGHT_WIDTH                                 8
        #define NE16_FILTER_MASK_RIGHT_MASK                                  0xff0000
        #define NE16_FILTER_MASK_RIGHT_RESET                                 0x0
        
        // Top mask. (access: R/W)
        #define NE16_FILTER_MASK_TOP_BIT                                     24
        #define NE16_FILTER_MASK_TOP_WIDTH                                   8
        #define NE16_FILTER_MASK_TOP_MASK                                    0xff000000
        #define NE16_FILTER_MASK_TOP_RESET                                   0x0
        
        // Weight bits minus 1. (access: R/W)
        #define NE16_CONFIG0_QWM1_BIT                                        0
        #define NE16_CONFIG0_QWM1_WIDTH                                      3
        #define NE16_CONFIG0_QWM1_MASK                                       0x7
        #define NE16_CONFIG0_QWM1_RESET                                      0x0
        
        // 16-bit input data mode. (access: R/W)
        #define NE16_CONFIG0_MODE16_BIT                                      3
        #define NE16_CONFIG0_MODE16_WIDTH                                    1
        #define NE16_CONFIG0_MODE16_MASK                                     0x8
        #define NE16_CONFIG0_MODE16_RESET                                    0x0
        
        // Streamout / quantization (1=quantization+streamout, 0=streamout only). (access: R/W)
        #define NE16_CONFIG0_STREAMOUT_BIT                                   4
        #define NE16_CONFIG0_STREAMOUT_WIDTH                                 1
        #define NE16_CONFIG0_STREAMOUT_MASK                                  0x10
        #define NE16_CONFIG0_STREAMOUT_RESET                                 0x0
        
        // Filter mode (11=reserved, 10=1x1, 01=3x3 depthwise, 00=3x3). (access: R/W)
        #define NE16_CONFIG0_FILTER_MODE_BIT                                 5
        #define NE16_CONFIG0_FILTER_MODE_WIDTH                               2
        #define NE16_CONFIG0_FILTER_MODE_MASK                                0x60
        #define NE16_CONFIG0_FILTER_MODE_RESET                               0x0
        
        // Linear mode (experimental). (access: R/W)
        #define NE16_CONFIG0_LINEAR_BIT                                      7
        #define NE16_CONFIG0_LINEAR_WIDTH                                    1
        #define NE16_CONFIG0_LINEAR_MASK                                     0x80
        #define NE16_CONFIG0_LINEAR_RESET                                    0x0
        
        // 2x2 strided mode (experimental). (access: R/W)
        #define NE16_CONFIG0_STRIDED_2X2_BIT                                 8
        #define NE16_CONFIG0_STRIDED_2X2_WIDTH                               1
        #define NE16_CONFIG0_STRIDED_2X2_MASK                                0x100
        #define NE16_CONFIG0_STRIDED_2X2_RESET                               0x0
        
        // Reserved. (access: R/W)
        #define NE16_CONFIG0_RES1_BIT                                        9
        #define NE16_CONFIG0_RES1_WIDTH                                      2
        #define NE16_CONFIG0_RES1_MASK                                       0x600
        #define NE16_CONFIG0_RES1_RESET                                      0x0
        
        // Rounding mode (0=round, 1=do not round). (access: R/W)
        #define NE16_CONFIG0_ROUND_BIT                                       11
        #define NE16_CONFIG0_ROUND_WIDTH                                     1
        #define NE16_CONFIG0_ROUND_MASK                                      0x800
        #define NE16_CONFIG0_ROUND_RESET                                     0x0
        
        // Normalization bits (00=8b, 01=16b, 10=32b). (access: R/W)
        #define NE16_CONFIG0_NORM_BITS_BIT                                   12
        #define NE16_CONFIG0_NORM_BITS_WIDTH                                 2
        #define NE16_CONFIG0_NORM_BITS_MASK                                  0x3000
        #define NE16_CONFIG0_NORM_BITS_RESET                                 0x0
        
        // Streamin mode (1=do streamin, 0=do not streamin). (access: R/W)
        #define NE16_CONFIG0_STREAMIN_BIT                                    14
        #define NE16_CONFIG0_STREAMIN_WIDTH                                  1
        #define NE16_CONFIG0_STREAMIN_MASK                                   0x4000
        #define NE16_CONFIG0_STREAMIN_RESET                                  0x0
        
        // Weight offset cfg (0=symmetric weights, 1=use layer-wise weight_offset). (access: R/W)
        #define NE16_CONFIG0_WEIGHT_OFFS_BIT                                 15
        #define NE16_CONFIG0_WEIGHT_OFFS_WIDTH                               1
        #define NE16_CONFIG0_WEIGHT_OFFS_MASK                                0x8000
        #define NE16_CONFIG0_WEIGHT_OFFS_RESET                               0x0
        
        // Quantization right shift. (access: R/W)
        #define NE16_CONFIG0_RIGHT_SHIFT_BIT                                 16
        #define NE16_CONFIG0_RIGHT_SHIFT_WIDTH                               5
        #define NE16_CONFIG0_RIGHT_SHIFT_MASK                                0x1f0000
        #define NE16_CONFIG0_RIGHT_SHIFT_RESET                               0x0
        
        // Quantization bits (00=8b, 01=16b, 10=32b). (access: R/W)
        #define NE16_CONFIG0_QUANT_BITS_BIT                                  21
        #define NE16_CONFIG0_QUANT_BITS_WIDTH                                2
        #define NE16_CONFIG0_QUANT_BITS_MASK                                 0x600000
        #define NE16_CONFIG0_QUANT_BITS_RESET                                0x0
        
        // Quantization rect(0=rectify, consider as unsigned; 1=do not rectify, keep sign). (access: R/W)
        #define NE16_CONFIG0_QUANT_RECT_BIT                                  23
        #define NE16_CONFIG0_QUANT_RECT_WIDTH                                1
        #define NE16_CONFIG0_QUANT_RECT_MASK                                 0x800000
        #define NE16_CONFIG0_QUANT_RECT_RESET                                0x0
        
        // Reserved. (access: R/W)
        #define NE16_CONFIG0_RES2_BIT                                        24
        #define NE16_CONFIG0_RES2_WIDTH                                      8
        #define NE16_CONFIG0_RES2_MASK                                       0xff000000
        #define NE16_CONFIG0_RES2_RESET                                      0x0

.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c

        
        #define NE16_SUBTILE_REM0_KI_GET(value)                    (GAP_BEXTRACTU((value),16,0))
        #define NE16_SUBTILE_REM0_KI_GETS(value)                   (GAP_BEXTRACT((value),16,0))
        #define NE16_SUBTILE_REM0_KI_SET(value,field)              (GAP_BINSERT((value),(field),16,0))
        #define NE16_SUBTILE_REM0_KI(val)                          ((val) << 0)
        
        #define NE16_SUBTILE_REM0_KO_GET(value)                    (GAP_BEXTRACTU((value),16,16))
        #define NE16_SUBTILE_REM0_KO_GETS(value)                   (GAP_BEXTRACT((value),16,16))
        #define NE16_SUBTILE_REM0_KO_SET(value,field)              (GAP_BINSERT((value),(field),16,16))
        #define NE16_SUBTILE_REM0_KO(val)                          ((val) << 16)
        
        #define NE16_SUBTILE_REM1_WO_GET(value)                    (GAP_BEXTRACTU((value),16,0))
        #define NE16_SUBTILE_REM1_WO_GETS(value)                   (GAP_BEXTRACT((value),16,0))
        #define NE16_SUBTILE_REM1_WO_SET(value,field)              (GAP_BINSERT((value),(field),16,0))
        #define NE16_SUBTILE_REM1_WO(val)                          ((val) << 0)
        
        #define NE16_SUBTILE_REM1_HO_GET(value)                    (GAP_BEXTRACTU((value),16,16))
        #define NE16_SUBTILE_REM1_HO_GETS(value)                   (GAP_BEXTRACT((value),16,16))
        #define NE16_SUBTILE_REM1_HO_SET(value,field)              (GAP_BINSERT((value),(field),16,16))
        #define NE16_SUBTILE_REM1_HO(val)                          ((val) << 16)
        
        #define NE16_SUBTILE_REM2_WI_GET(value)                    (GAP_BEXTRACTU((value),16,0))
        #define NE16_SUBTILE_REM2_WI_GETS(value)                   (GAP_BEXTRACT((value),16,0))
        #define NE16_SUBTILE_REM2_WI_SET(value,field)              (GAP_BINSERT((value),(field),16,0))
        #define NE16_SUBTILE_REM2_WI(val)                          ((val) << 0)
        
        #define NE16_SUBTILE_REM2_HI_GET(value)                    (GAP_BEXTRACTU((value),16,16))
        #define NE16_SUBTILE_REM2_HI_GETS(value)                   (GAP_BEXTRACT((value),16,16))
        #define NE16_SUBTILE_REM2_HI_SET(value,field)              (GAP_BINSERT((value),(field),16,16))
        #define NE16_SUBTILE_REM2_HI(val)                          ((val) << 16)
        
        #define NE16_SUBTILE_NB0_KI_GET(value)                     (GAP_BEXTRACTU((value),16,0))
        #define NE16_SUBTILE_NB0_KI_GETS(value)                    (GAP_BEXTRACT((value),16,0))
        #define NE16_SUBTILE_NB0_KI_SET(value,field)               (GAP_BINSERT((value),(field),16,0))
        #define NE16_SUBTILE_NB0_KI(val)                           ((val) << 0)
        
        #define NE16_SUBTILE_NB0_KO_GET(value)                     (GAP_BEXTRACTU((value),16,16))
        #define NE16_SUBTILE_NB0_KO_GETS(value)                    (GAP_BEXTRACT((value),16,16))
        #define NE16_SUBTILE_NB0_KO_SET(value,field)               (GAP_BINSERT((value),(field),16,16))
        #define NE16_SUBTILE_NB0_KO(val)                           ((val) << 16)
        
        #define NE16_SUBTILE_NB1_WO_GET(value)                     (GAP_BEXTRACTU((value),16,0))
        #define NE16_SUBTILE_NB1_WO_GETS(value)                    (GAP_BEXTRACT((value),16,0))
        #define NE16_SUBTILE_NB1_WO_SET(value,field)               (GAP_BINSERT((value),(field),16,0))
        #define NE16_SUBTILE_NB1_WO(val)                           ((val) << 0)
        
        #define NE16_SUBTILE_NB1_HO_GET(value)                     (GAP_BEXTRACTU((value),16,16))
        #define NE16_SUBTILE_NB1_HO_GETS(value)                    (GAP_BEXTRACT((value),16,16))
        #define NE16_SUBTILE_NB1_HO_SET(value,field)               (GAP_BINSERT((value),(field),16,16))
        #define NE16_SUBTILE_NB1_HO(val)                           ((val) << 16)
        
        #define NE16_PADDING_VALUE_GET(value)                      (GAP_BEXTRACTU((value),16,0))
        #define NE16_PADDING_VALUE_GETS(value)                     (GAP_BEXTRACT((value),16,0))
        #define NE16_PADDING_VALUE_SET(value,field)                (GAP_BINSERT((value),(field),16,0))
        #define NE16_PADDING_VALUE(val)                            ((val) << 0)
        
        #define NE16_PADDING_LEFT_GET(value)                       (GAP_BEXTRACTU((value),4,16))
        #define NE16_PADDING_LEFT_GETS(value)                      (GAP_BEXTRACT((value),4,16))
        #define NE16_PADDING_LEFT_SET(value,field)                 (GAP_BINSERT((value),(field),4,16))
        #define NE16_PADDING_LEFT(val)                             ((val) << 16)
        
        #define NE16_PADDING_BOTTOM_GET(value)                     (GAP_BEXTRACTU((value),4,20))
        #define NE16_PADDING_BOTTOM_GETS(value)                    (GAP_BEXTRACT((value),4,20))
        #define NE16_PADDING_BOTTOM_SET(value,field)               (GAP_BINSERT((value),(field),4,20))
        #define NE16_PADDING_BOTTOM(val)                           ((val) << 20)
        
        #define NE16_PADDING_RIGHT_GET(value)                      (GAP_BEXTRACTU((value),4,24))
        #define NE16_PADDING_RIGHT_GETS(value)                     (GAP_BEXTRACT((value),4,24))
        #define NE16_PADDING_RIGHT_SET(value,field)                (GAP_BINSERT((value),(field),4,24))
        #define NE16_PADDING_RIGHT(val)                            ((val) << 24)
        
        #define NE16_PADDING_TOP_GET(value)                        (GAP_BEXTRACTU((value),4,28))
        #define NE16_PADDING_TOP_GETS(value)                       (GAP_BEXTRACT((value),4,28))
        #define NE16_PADDING_TOP_SET(value,field)                  (GAP_BINSERT((value),(field),4,28))
        #define NE16_PADDING_TOP(val)                              ((val) << 28)
        
        #define NE16_FILTER_MASK_LEFT_GET(value)                   (GAP_BEXTRACTU((value),8,0))
        #define NE16_FILTER_MASK_LEFT_GETS(value)                  (GAP_BEXTRACT((value),8,0))
        #define NE16_FILTER_MASK_LEFT_SET(value,field)             (GAP_BINSERT((value),(field),8,0))
        #define NE16_FILTER_MASK_LEFT(val)                         ((val) << 0)
        
        #define NE16_FILTER_MASK_BOTTOM_GET(value)                 (GAP_BEXTRACTU((value),8,8))
        #define NE16_FILTER_MASK_BOTTOM_GETS(value)                (GAP_BEXTRACT((value),8,8))
        #define NE16_FILTER_MASK_BOTTOM_SET(value,field)           (GAP_BINSERT((value),(field),8,8))
        #define NE16_FILTER_MASK_BOTTOM(val)                       ((val) << 8)
        
        #define NE16_FILTER_MASK_RIGHT_GET(value)                  (GAP_BEXTRACTU((value),8,16))
        #define NE16_FILTER_MASK_RIGHT_GETS(value)                 (GAP_BEXTRACT((value),8,16))
        #define NE16_FILTER_MASK_RIGHT_SET(value,field)            (GAP_BINSERT((value),(field),8,16))
        #define NE16_FILTER_MASK_RIGHT(val)                        ((val) << 16)
        
        #define NE16_FILTER_MASK_TOP_GET(value)                    (GAP_BEXTRACTU((value),8,24))
        #define NE16_FILTER_MASK_TOP_GETS(value)                   (GAP_BEXTRACT((value),8,24))
        #define NE16_FILTER_MASK_TOP_SET(value,field)              (GAP_BINSERT((value),(field),8,24))
        #define NE16_FILTER_MASK_TOP(val)                          ((val) << 24)
        
        #define NE16_CONFIG0_QWM1_GET(value)                       (GAP_BEXTRACTU((value),3,0))
        #define NE16_CONFIG0_QWM1_GETS(value)                      (GAP_BEXTRACT((value),3,0))
        #define NE16_CONFIG0_QWM1_SET(value,field)                 (GAP_BINSERT((value),(field),3,0))
        #define NE16_CONFIG0_QWM1(val)                             ((val) << 0)
        
        #define NE16_CONFIG0_MODE16_GET(value)                     (GAP_BEXTRACTU((value),1,3))
        #define NE16_CONFIG0_MODE16_GETS(value)                    (GAP_BEXTRACT((value),1,3))
        #define NE16_CONFIG0_MODE16_SET(value,field)               (GAP_BINSERT((value),(field),1,3))
        #define NE16_CONFIG0_MODE16(val)                           ((val) << 3)
        
        #define NE16_CONFIG0_STREAMOUT_GET(value)                  (GAP_BEXTRACTU((value),1,4))
        #define NE16_CONFIG0_STREAMOUT_GETS(value)                 (GAP_BEXTRACT((value),1,4))
        #define NE16_CONFIG0_STREAMOUT_SET(value,field)            (GAP_BINSERT((value),(field),1,4))
        #define NE16_CONFIG0_STREAMOUT(val)                        ((val) << 4)
        
        #define NE16_CONFIG0_FILTER_MODE_GET(value)                (GAP_BEXTRACTU((value),2,5))
        #define NE16_CONFIG0_FILTER_MODE_GETS(value)               (GAP_BEXTRACT((value),2,5))
        #define NE16_CONFIG0_FILTER_MODE_SET(value,field)          (GAP_BINSERT((value),(field),2,5))
        #define NE16_CONFIG0_FILTER_MODE(val)                      ((val) << 5)
        
        #define NE16_CONFIG0_LINEAR_GET(value)                     (GAP_BEXTRACTU((value),1,7))
        #define NE16_CONFIG0_LINEAR_GETS(value)                    (GAP_BEXTRACT((value),1,7))
        #define NE16_CONFIG0_LINEAR_SET(value,field)               (GAP_BINSERT((value),(field),1,7))
        #define NE16_CONFIG0_LINEAR(val)                           ((val) << 7)
        
        #define NE16_CONFIG0_STRIDED_2X2_GET(value)                (GAP_BEXTRACTU((value),1,8))
        #define NE16_CONFIG0_STRIDED_2X2_GETS(value)               (GAP_BEXTRACT((value),1,8))
        #define NE16_CONFIG0_STRIDED_2X2_SET(value,field)          (GAP_BINSERT((value),(field),1,8))
        #define NE16_CONFIG0_STRIDED_2X2(val)                      ((val) << 8)
        
        #define NE16_CONFIG0_RES1_GET(value)                       (GAP_BEXTRACTU((value),2,9))
        #define NE16_CONFIG0_RES1_GETS(value)                      (GAP_BEXTRACT((value),2,9))
        #define NE16_CONFIG0_RES1_SET(value,field)                 (GAP_BINSERT((value),(field),2,9))
        #define NE16_CONFIG0_RES1(val)                             ((val) << 9)
        
        #define NE16_CONFIG0_ROUND_GET(value)                      (GAP_BEXTRACTU((value),1,11))
        #define NE16_CONFIG0_ROUND_GETS(value)                     (GAP_BEXTRACT((value),1,11))
        #define NE16_CONFIG0_ROUND_SET(value,field)                (GAP_BINSERT((value),(field),1,11))
        #define NE16_CONFIG0_ROUND(val)                            ((val) << 11)
        
        #define NE16_CONFIG0_NORM_BITS_GET(value)                  (GAP_BEXTRACTU((value),2,12))
        #define NE16_CONFIG0_NORM_BITS_GETS(value)                 (GAP_BEXTRACT((value),2,12))
        #define NE16_CONFIG0_NORM_BITS_SET(value,field)            (GAP_BINSERT((value),(field),2,12))
        #define NE16_CONFIG0_NORM_BITS(val)                        ((val) << 12)
        
        #define NE16_CONFIG0_STREAMIN_GET(value)                   (GAP_BEXTRACTU((value),1,14))
        #define NE16_CONFIG0_STREAMIN_GETS(value)                  (GAP_BEXTRACT((value),1,14))
        #define NE16_CONFIG0_STREAMIN_SET(value,field)             (GAP_BINSERT((value),(field),1,14))
        #define NE16_CONFIG0_STREAMIN(val)                         ((val) << 14)
        
        #define NE16_CONFIG0_WEIGHT_OFFS_GET(value)                (GAP_BEXTRACTU((value),1,15))
        #define NE16_CONFIG0_WEIGHT_OFFS_GETS(value)               (GAP_BEXTRACT((value),1,15))
        #define NE16_CONFIG0_WEIGHT_OFFS_SET(value,field)          (GAP_BINSERT((value),(field),1,15))
        #define NE16_CONFIG0_WEIGHT_OFFS(val)                      ((val) << 15)
        
        #define NE16_CONFIG0_RIGHT_SHIFT_GET(value)                (GAP_BEXTRACTU((value),5,16))
        #define NE16_CONFIG0_RIGHT_SHIFT_GETS(value)               (GAP_BEXTRACT((value),5,16))
        #define NE16_CONFIG0_RIGHT_SHIFT_SET(value,field)          (GAP_BINSERT((value),(field),5,16))
        #define NE16_CONFIG0_RIGHT_SHIFT(val)                      ((val) << 16)
        
        #define NE16_CONFIG0_QUANT_BITS_GET(value)                 (GAP_BEXTRACTU((value),2,21))
        #define NE16_CONFIG0_QUANT_BITS_GETS(value)                (GAP_BEXTRACT((value),2,21))
        #define NE16_CONFIG0_QUANT_BITS_SET(value,field)           (GAP_BINSERT((value),(field),2,21))
        #define NE16_CONFIG0_QUANT_BITS(val)                       ((val) << 21)
        
        #define NE16_CONFIG0_QUANT_RECT_GET(value)                 (GAP_BEXTRACTU((value),1,23))
        #define NE16_CONFIG0_QUANT_RECT_GETS(value)                (GAP_BEXTRACT((value),1,23))
        #define NE16_CONFIG0_QUANT_RECT_SET(value,field)           (GAP_BINSERT((value),(field),1,23))
        #define NE16_CONFIG0_QUANT_RECT(val)                       ((val) << 23)
        
        #define NE16_CONFIG0_RES2_GET(value)                       (GAP_BEXTRACTU((value),8,24))
        #define NE16_CONFIG0_RES2_GETS(value)                      (GAP_BEXTRACT((value),8,24))
        #define NE16_CONFIG0_RES2_SET(value,field)                 (GAP_BINSERT((value),(field),8,24))
        #define NE16_CONFIG0_RES2(val)                             ((val) << 24)

.. toggle-header::
    :header: *Register map structure*

    .. code-block:: c

        /** NE16_Type Register Layout Typedef */
        typedef struct {
            volatile uint32_t trigger;  // Write 0 to start execution, unlock controller.
            volatile uint32_t acquire;  // On read starts a job offload, locks controller. Returns job ID.
            volatile uint32_t finished_jobs;  // Returns number of completed jobs.
            volatile uint32_t status;  // Returns status of jobs in the queue (each byte is a different job).
            volatile uint32_t running_job;  // Returns ID of currently running job.
            volatile uint32_t soft_clear;  // Soft-clears the NE16 at any write.
            volatile uint32_t microcode;  // Reserved.
            volatile uint32_t sw_sync;  // Triggers a SW event inside NE16 (e.g. for DMA synchronization).
            volatile uint32_t weights_ptr;  // Pointer to Weights tensor in memory (d3=Ko, d2=KiMaj, d1=Qw, d0=Fx<em>Fy</em>Kimin for 3x3 mode; d2=Ko, d1=KiMaj, d0=Qw*KiMin for 1x1 mode).
            volatile uint32_t infeat_ptr;  // Pointer to InFeat tensor in memory (d2=Hi, d1=Wi, d0=Ki).
            volatile uint32_t outfeat_ptr;  // Pointer to OutFeat tensor in memory (d2=Ho, d1=Wo, d0=Ko).
            volatile uint32_t scale_ptr;  // Pointer to Scale parameters in memory (d0=Ko).
            volatile uint32_t scale_shift_ptr;  // Pointer to Scale parameters in memory (d0=Ko).
            volatile uint32_t scale_bias_ptr;  // Pointer to Scale parameters in memory (d0=Ko).
            volatile uint32_t infeat_d0_stride; 
            volatile uint32_t infeat_d1_stride; 
            volatile uint32_t infeat_d2_stride; 
            volatile uint32_t outfeat_d0_stride; 
            volatile uint32_t outfeat_d1_stride; 
            volatile uint32_t outfeat_d2_stride; 
            volatile uint32_t weights_d0_stride; 
            volatile uint32_t weights_d1_stride; 
            volatile uint32_t weights_d2_stride; 
            volatile uint32_t subtile_rem0; 
            volatile uint32_t subtile_rem1; 
            volatile uint32_t subtile_rem2; 
            volatile uint32_t subtile_nb0; 
            volatile uint32_t subtile_nb1; 
            volatile uint32_t padding; 
            volatile uint32_t weight_offset; 
            volatile uint32_t filter_mask; 
            volatile uint32_t config0;  //   
        } __attribute__((packed)) ne16_t;

.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_trigger_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_acquire_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_finished_jobs_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_status_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_running_job_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_soft_clear_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_microcode_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_sw_sync_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_weights_ptr_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_infeat_ptr_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_outfeat_ptr_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_scale_ptr_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_scale_shift_ptr_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_scale_bias_ptr_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_infeat_d0_stride_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_infeat_d1_stride_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_infeat_d2_stride_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_outfeat_d0_stride_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_outfeat_d1_stride_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_outfeat_d2_stride_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_weights_d0_stride_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_weights_d1_stride_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_weights_d2_stride_t;
        
        typedef union {
          struct {
            unsigned int ki              :16; // Ki remainder.
            unsigned int ko              :16; // Ko remainder.
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_subtile_rem0_t;
        
        typedef union {
          struct {
            unsigned int wo              :16; // Wo remainder.
            unsigned int ho              :16; // Ho remainder.
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_subtile_rem1_t;
        
        typedef union {
          struct {
            unsigned int wi              :16; // Wi remainder.
            unsigned int hi              :16; // Hi remainder.
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_subtile_rem2_t;
        
        typedef union {
          struct {
            unsigned int ki              :16; // Ki remainder.
            unsigned int ko              :16; // Ko remainder.
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_subtile_nb0_t;
        
        typedef union {
          struct {
            unsigned int wo              :16; // Wo remainder.
            unsigned int ho              :16; // Ho remainder.
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_subtile_nb1_t;
        
        typedef union {
          struct {
            unsigned int value           :16; // Padding value.
            unsigned int left            :4 ; // Number of spatially padded pixels in the LEFT subtile border.
            unsigned int bottom          :4 ; // Number of spatially padded pixels in the BOTTOM subtile border (counted from 5 pixels upward!).
            unsigned int right           :4 ; // Number of spatially padded pixels in the RIGHT subtile border (counted from 5 pixels leftward!).
            unsigned int top             :4 ; // Number of spatially padded pixels in the TOP subtile border.
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_padding_t;
        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_weight_offset_t;
        
        typedef union {
          struct {
            unsigned int left            :8 ; // Left mask.
            unsigned int bottom          :8 ; // Bottom mask.
            unsigned int right           :8 ; // Right mask.
            unsigned int top             :8 ; // Top mask.
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_filter_mask_t;
        
        typedef union {
          struct {
            unsigned int qwm1            :3 ; // Weight bits minus 1.
            unsigned int mode16          :1 ; // 16-bit input data mode.
            unsigned int streamout       :1 ; // Streamout / quantization (1=quantization+streamout, 0=streamout only).
            unsigned int filter_mode     :2 ; // Filter mode (11=reserved, 10=1x1, 01=3x3 depthwise, 00=3x3).
            unsigned int linear          :1 ; // Linear mode (experimental).
            unsigned int strided_2x2     :1 ; // 2x2 strided mode (experimental).
            unsigned int res1            :2 ; // Reserved.
            unsigned int round           :1 ; // Rounding mode (0=round, 1=do not round).
            unsigned int norm_bits       :2 ; // Normalization bits (00=8b, 01=16b, 10=32b).
            unsigned int streamin        :1 ; // Streamin mode (1=do streamin, 0=do not streamin).
            unsigned int weight_offs     :1 ; // Weight offset cfg (0=symmetric weights, 1=use layer-wise weight_offset).
            unsigned int right_shift     :5 ; // Quantization right shift.
            unsigned int quant_bits      :2 ; // Quantization bits (00=8b, 01=16b, 10=32b).
            unsigned int quant_rect      :1 ; // Quantization rect(0=rectify, consider as unsigned; 1=do not rectify, keep sign).
            unsigned int res2            :8 ; // Reserved.
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_config0_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_regmap_ne16 : public vp::regmap
        {
        public:
            vp_ne16_trigger trigger;
            vp_ne16_acquire acquire;
            vp_ne16_finished_jobs finished_jobs;
            vp_ne16_status status;
            vp_ne16_running_job running_job;
            vp_ne16_soft_clear soft_clear;
            vp_ne16_microcode microcode;
            vp_ne16_sw_sync sw_sync;
            vp_ne16_weights_ptr weights_ptr;
            vp_ne16_infeat_ptr infeat_ptr;
            vp_ne16_outfeat_ptr outfeat_ptr;
            vp_ne16_scale_ptr scale_ptr;
            vp_ne16_scale_shift_ptr scale_shift_ptr;
            vp_ne16_scale_bias_ptr scale_bias_ptr;
            vp_ne16_infeat_d0_stride infeat_d0_stride;
            vp_ne16_infeat_d1_stride infeat_d1_stride;
            vp_ne16_infeat_d2_stride infeat_d2_stride;
            vp_ne16_outfeat_d0_stride outfeat_d0_stride;
            vp_ne16_outfeat_d1_stride outfeat_d1_stride;
            vp_ne16_outfeat_d2_stride outfeat_d2_stride;
            vp_ne16_weights_d0_stride weights_d0_stride;
            vp_ne16_weights_d1_stride weights_d1_stride;
            vp_ne16_weights_d2_stride weights_d2_stride;
            vp_ne16_subtile_rem0 subtile_rem0;
            vp_ne16_subtile_rem1 subtile_rem1;
            vp_ne16_subtile_rem2 subtile_rem2;
            vp_ne16_subtile_nb0 subtile_nb0;
            vp_ne16_subtile_nb1 subtile_nb1;
            vp_ne16_padding padding;
            vp_ne16_weight_offset weight_offset;
            vp_ne16_filter_mask filter_mask;
            vp_ne16_config0 config0;
        };

|

.. _ne16_TRIGGER:

TRIGGER
"""""""

Write 0 to start execution, unlock controller.

.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                // Write 0 to start execution, unlock controller.
                #define NE16_TRIGGER_OFFSET                      0x0

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_trigger_get(uint32_t base);
        static inline void ne16_trigger_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_trigger_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_trigger : public vp::reg_32
        {
        public:
        };

|

.. _ne16_ACQUIRE:

ACQUIRE
"""""""

On read starts a job offload, locks controller. Returns job ID.

.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                // On read starts a job offload, locks controller. Returns job ID.
                #define NE16_ACQUIRE_OFFSET                      0x4

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_acquire_get(uint32_t base);
        static inline void ne16_acquire_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_acquire_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_acquire : public vp::reg_32
        {
        public:
        };

|

.. _ne16_FINISHED_JOBS:

FINISHED_JOBS
"""""""""""""

Returns number of completed jobs.

.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                // Returns number of completed jobs.
                #define NE16_FINISHED_JOBS_OFFSET                0x8

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_finished_jobs_get(uint32_t base);
        static inline void ne16_finished_jobs_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_finished_jobs_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_finished_jobs : public vp::reg_32
        {
        public:
        };

|

.. _ne16_STATUS:

STATUS
""""""

Returns status of jobs in the queue (each byte is a different job).

.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                // Returns status of jobs in the queue (each byte is a different job).
                #define NE16_STATUS_OFFSET                       0xc

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_status_get(uint32_t base);
        static inline void ne16_status_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_status_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_status : public vp::reg_32
        {
        public:
        };

|

.. _ne16_RUNNING_JOB:

RUNNING_JOB
"""""""""""

Returns ID of currently running job.

.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                // Returns ID of currently running job.
                #define NE16_RUNNING_JOB_OFFSET                  0x10

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_running_job_get(uint32_t base);
        static inline void ne16_running_job_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_running_job_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_running_job : public vp::reg_32
        {
        public:
        };

|

.. _ne16_SOFT_CLEAR:

SOFT_CLEAR
""""""""""

Soft-clears the NE16 at any write.

.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                // Soft-clears the NE16 at any write.
                #define NE16_SOFT_CLEAR_OFFSET                   0x14

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_soft_clear_get(uint32_t base);
        static inline void ne16_soft_clear_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_soft_clear_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_soft_clear : public vp::reg_32
        {
        public:
        };

|

.. _ne16_MICROCODE:

MICROCODE
"""""""""

Reserved.

.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                // Reserved.
                #define NE16_MICROCODE_OFFSET                    0x18

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_microcode_get(uint32_t base);
        static inline void ne16_microcode_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_microcode_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_microcode : public vp::reg_32
        {
        public:
        };

|

.. _ne16_SW_SYNC:

SW_SYNC
"""""""

Triggers a SW event inside NE16 (e.g. for DMA synchronization).

.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                // Triggers a SW event inside NE16 (e.g. for DMA synchronization).
                #define NE16_SW_SYNC_OFFSET                      0x1c

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_sw_sync_get(uint32_t base);
        static inline void ne16_sw_sync_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_sw_sync_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_sw_sync : public vp::reg_32
        {
        public:
        };

|

.. _ne16_WEIGHTS_PTR:

WEIGHTS_PTR
"""""""""""

Pointer to Weights tensor in memory (d3=Ko, d2=KiMaj, d1=Qw, d0=Fx<em>Fy</em>Kimin for 3x3 mode; d2=Ko, d1=KiMaj, d0=Qw*KiMin for 1x1 mode).

.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                // Pointer to Weights tensor in memory (d3=Ko, d2=KiMaj, d1=Qw, d0=Fx<em>Fy</em>Kimin for 3x3 mode; d2=Ko, d1=KiMaj, d0=Qw*KiMin for 1x1 mode).
                #define NE16_WEIGHTS_PTR_OFFSET                  0x20

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_weights_ptr_get(uint32_t base);
        static inline void ne16_weights_ptr_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_weights_ptr_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_weights_ptr : public vp::reg_32
        {
        public:
        };

|

.. _ne16_INFEAT_PTR:

INFEAT_PTR
""""""""""

Pointer to InFeat tensor in memory (d2=Hi, d1=Wi, d0=Ki).

.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                // Pointer to InFeat tensor in memory (d2=Hi, d1=Wi, d0=Ki).
                #define NE16_INFEAT_PTR_OFFSET                   0x24

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_infeat_ptr_get(uint32_t base);
        static inline void ne16_infeat_ptr_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_infeat_ptr_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_infeat_ptr : public vp::reg_32
        {
        public:
        };

|

.. _ne16_OUTFEAT_PTR:

OUTFEAT_PTR
"""""""""""

Pointer to OutFeat tensor in memory (d2=Ho, d1=Wo, d0=Ko).

.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                // Pointer to OutFeat tensor in memory (d2=Ho, d1=Wo, d0=Ko).
                #define NE16_OUTFEAT_PTR_OFFSET                  0x28

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_outfeat_ptr_get(uint32_t base);
        static inline void ne16_outfeat_ptr_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_outfeat_ptr_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_outfeat_ptr : public vp::reg_32
        {
        public:
        };

|

.. _ne16_SCALE_PTR:

SCALE_PTR
"""""""""

Pointer to Scale parameters in memory (d0=Ko).

.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                // Pointer to Scale parameters in memory (d0=Ko).
                #define NE16_SCALE_PTR_OFFSET                    0x2c

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_scale_ptr_get(uint32_t base);
        static inline void ne16_scale_ptr_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_scale_ptr_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_scale_ptr : public vp::reg_32
        {
        public:
        };

|

.. _ne16_SCALE_SHIFT_PTR:

SCALE_SHIFT_PTR
"""""""""""""""

Pointer to Scale parameters in memory (d0=Ko).

.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                // Pointer to Scale parameters in memory (d0=Ko).
                #define NE16_SCALE_SHIFT_PTR_OFFSET              0x30

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_scale_shift_ptr_get(uint32_t base);
        static inline void ne16_scale_shift_ptr_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_scale_shift_ptr_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_scale_shift_ptr : public vp::reg_32
        {
        public:
        };

|

.. _ne16_SCALE_BIAS_PTR:

SCALE_BIAS_PTR
""""""""""""""

Pointer to Scale parameters in memory (d0=Ko).

.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                // Pointer to Scale parameters in memory (d0=Ko).
                #define NE16_SCALE_BIAS_PTR_OFFSET               0x34

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_scale_bias_ptr_get(uint32_t base);
        static inline void ne16_scale_bias_ptr_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_scale_bias_ptr_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_scale_bias_ptr : public vp::reg_32
        {
        public:
        };

|

.. _ne16_INFEAT_D0_STRIDE:

INFEAT_D0_STRIDE
""""""""""""""""



.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                #define NE16_INFEAT_D0_STRIDE_OFFSET             0x38

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_infeat_d0_stride_get(uint32_t base);
        static inline void ne16_infeat_d0_stride_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_infeat_d0_stride_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_infeat_d0_stride : public vp::reg_32
        {
        public:
        };

|

.. _ne16_INFEAT_D1_STRIDE:

INFEAT_D1_STRIDE
""""""""""""""""



.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                #define NE16_INFEAT_D1_STRIDE_OFFSET             0x3c

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_infeat_d1_stride_get(uint32_t base);
        static inline void ne16_infeat_d1_stride_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_infeat_d1_stride_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_infeat_d1_stride : public vp::reg_32
        {
        public:
        };

|

.. _ne16_INFEAT_D2_STRIDE:

INFEAT_D2_STRIDE
""""""""""""""""



.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                #define NE16_INFEAT_D2_STRIDE_OFFSET             0x40

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_infeat_d2_stride_get(uint32_t base);
        static inline void ne16_infeat_d2_stride_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_infeat_d2_stride_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_infeat_d2_stride : public vp::reg_32
        {
        public:
        };

|

.. _ne16_OUTFEAT_D0_STRIDE:

OUTFEAT_D0_STRIDE
"""""""""""""""""



.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                #define NE16_OUTFEAT_D0_STRIDE_OFFSET            0x44

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_outfeat_d0_stride_get(uint32_t base);
        static inline void ne16_outfeat_d0_stride_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_outfeat_d0_stride_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_outfeat_d0_stride : public vp::reg_32
        {
        public:
        };

|

.. _ne16_OUTFEAT_D1_STRIDE:

OUTFEAT_D1_STRIDE
"""""""""""""""""



.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                #define NE16_OUTFEAT_D1_STRIDE_OFFSET            0x48

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_outfeat_d1_stride_get(uint32_t base);
        static inline void ne16_outfeat_d1_stride_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_outfeat_d1_stride_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_outfeat_d1_stride : public vp::reg_32
        {
        public:
        };

|

.. _ne16_OUTFEAT_D2_STRIDE:

OUTFEAT_D2_STRIDE
"""""""""""""""""



.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                #define NE16_OUTFEAT_D2_STRIDE_OFFSET            0x4c

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_outfeat_d2_stride_get(uint32_t base);
        static inline void ne16_outfeat_d2_stride_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_outfeat_d2_stride_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_outfeat_d2_stride : public vp::reg_32
        {
        public:
        };

|

.. _ne16_WEIGHTS_D0_STRIDE:

WEIGHTS_D0_STRIDE
"""""""""""""""""



.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                #define NE16_WEIGHTS_D0_STRIDE_OFFSET            0x50

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_weights_d0_stride_get(uint32_t base);
        static inline void ne16_weights_d0_stride_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_weights_d0_stride_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_weights_d0_stride : public vp::reg_32
        {
        public:
        };

|

.. _ne16_WEIGHTS_D1_STRIDE:

WEIGHTS_D1_STRIDE
"""""""""""""""""



.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                #define NE16_WEIGHTS_D1_STRIDE_OFFSET            0x54

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_weights_d1_stride_get(uint32_t base);
        static inline void ne16_weights_d1_stride_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_weights_d1_stride_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_weights_d1_stride : public vp::reg_32
        {
        public:
        };

|

.. _ne16_WEIGHTS_D2_STRIDE:

WEIGHTS_D2_STRIDE
"""""""""""""""""



.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                #define NE16_WEIGHTS_D2_STRIDE_OFFSET            0x58

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_weights_d2_stride_get(uint32_t base);
        static inline void ne16_weights_d2_stride_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_weights_d2_stride_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_weights_d2_stride : public vp::reg_32
        {
        public:
        };

|

.. _ne16_SUBTILE_REM0:

SUBTILE_REM0
""""""""""""



.. table:: 

    +-----+---+----+-------------+
    |Bit #|R/W|Name| Description |
    +=====+===+====+=============+
    |15:0 |R/W|KI  |Ki remainder.|
    +-----+---+----+-------------+
    |31:16|R/W|KO  |Ko remainder.|
    +-----+---+----+-------------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                #define NE16_SUBTILE_REM0_OFFSET                 0x5c

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_subtile_rem0_get(uint32_t base);
        static inline void ne16_subtile_rem0_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c

        
        // Ki remainder. (access: R/W)
        #define NE16_SUBTILE_REM0_KI_BIT                                     0
        #define NE16_SUBTILE_REM0_KI_WIDTH                                   16
        #define NE16_SUBTILE_REM0_KI_MASK                                    0xffff
        #define NE16_SUBTILE_REM0_KI_RESET                                   0x0
        
        // Ko remainder. (access: R/W)
        #define NE16_SUBTILE_REM0_KO_BIT                                     16
        #define NE16_SUBTILE_REM0_KO_WIDTH                                   16
        #define NE16_SUBTILE_REM0_KO_MASK                                    0xffff0000
        #define NE16_SUBTILE_REM0_KO_RESET                                   0x0

.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c

        
        #define NE16_SUBTILE_REM0_KI_GET(value)                    (GAP_BEXTRACTU((value),16,0))
        #define NE16_SUBTILE_REM0_KI_GETS(value)                   (GAP_BEXTRACT((value),16,0))
        #define NE16_SUBTILE_REM0_KI_SET(value,field)              (GAP_BINSERT((value),(field),16,0))
        #define NE16_SUBTILE_REM0_KI(val)                          ((val) << 0)
        
        #define NE16_SUBTILE_REM0_KO_GET(value)                    (GAP_BEXTRACTU((value),16,16))
        #define NE16_SUBTILE_REM0_KO_GETS(value)                   (GAP_BEXTRACT((value),16,16))
        #define NE16_SUBTILE_REM0_KO_SET(value,field)              (GAP_BINSERT((value),(field),16,16))
        #define NE16_SUBTILE_REM0_KO(val)                          ((val) << 16)

.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
            unsigned int ki              :16; // Ki remainder.
            unsigned int ko              :16; // Ko remainder.
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_subtile_rem0_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_subtile_rem0 : public vp::reg_32
        {
        public:
            inline void ki_set(uint32_t value);
            inline uint32_t ki_get();
            inline void ko_set(uint32_t value);
            inline uint32_t ko_get();
        };

|

.. _ne16_SUBTILE_REM1:

SUBTILE_REM1
""""""""""""



.. table:: 

    +-----+---+----+-------------+
    |Bit #|R/W|Name| Description |
    +=====+===+====+=============+
    |15:0 |R/W|WO  |Wo remainder.|
    +-----+---+----+-------------+
    |31:16|R/W|HO  |Ho remainder.|
    +-----+---+----+-------------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                #define NE16_SUBTILE_REM1_OFFSET                 0x60

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_subtile_rem1_get(uint32_t base);
        static inline void ne16_subtile_rem1_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c

        
        // Wo remainder. (access: R/W)
        #define NE16_SUBTILE_REM1_WO_BIT                                     0
        #define NE16_SUBTILE_REM1_WO_WIDTH                                   16
        #define NE16_SUBTILE_REM1_WO_MASK                                    0xffff
        #define NE16_SUBTILE_REM1_WO_RESET                                   0x0
        
        // Ho remainder. (access: R/W)
        #define NE16_SUBTILE_REM1_HO_BIT                                     16
        #define NE16_SUBTILE_REM1_HO_WIDTH                                   16
        #define NE16_SUBTILE_REM1_HO_MASK                                    0xffff0000
        #define NE16_SUBTILE_REM1_HO_RESET                                   0x0

.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c

        
        #define NE16_SUBTILE_REM1_WO_GET(value)                    (GAP_BEXTRACTU((value),16,0))
        #define NE16_SUBTILE_REM1_WO_GETS(value)                   (GAP_BEXTRACT((value),16,0))
        #define NE16_SUBTILE_REM1_WO_SET(value,field)              (GAP_BINSERT((value),(field),16,0))
        #define NE16_SUBTILE_REM1_WO(val)                          ((val) << 0)
        
        #define NE16_SUBTILE_REM1_HO_GET(value)                    (GAP_BEXTRACTU((value),16,16))
        #define NE16_SUBTILE_REM1_HO_GETS(value)                   (GAP_BEXTRACT((value),16,16))
        #define NE16_SUBTILE_REM1_HO_SET(value,field)              (GAP_BINSERT((value),(field),16,16))
        #define NE16_SUBTILE_REM1_HO(val)                          ((val) << 16)

.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
            unsigned int wo              :16; // Wo remainder.
            unsigned int ho              :16; // Ho remainder.
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_subtile_rem1_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_subtile_rem1 : public vp::reg_32
        {
        public:
            inline void wo_set(uint32_t value);
            inline uint32_t wo_get();
            inline void ho_set(uint32_t value);
            inline uint32_t ho_get();
        };

|

.. _ne16_SUBTILE_REM2:

SUBTILE_REM2
""""""""""""



.. table:: 

    +-----+---+----+-------------+
    |Bit #|R/W|Name| Description |
    +=====+===+====+=============+
    |15:0 |R/W|WI  |Wi remainder.|
    +-----+---+----+-------------+
    |31:16|R/W|HI  |Hi remainder.|
    +-----+---+----+-------------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                #define NE16_SUBTILE_REM2_OFFSET                 0x64

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_subtile_rem2_get(uint32_t base);
        static inline void ne16_subtile_rem2_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c

        
        // Wi remainder. (access: R/W)
        #define NE16_SUBTILE_REM2_WI_BIT                                     0
        #define NE16_SUBTILE_REM2_WI_WIDTH                                   16
        #define NE16_SUBTILE_REM2_WI_MASK                                    0xffff
        #define NE16_SUBTILE_REM2_WI_RESET                                   0x0
        
        // Hi remainder. (access: R/W)
        #define NE16_SUBTILE_REM2_HI_BIT                                     16
        #define NE16_SUBTILE_REM2_HI_WIDTH                                   16
        #define NE16_SUBTILE_REM2_HI_MASK                                    0xffff0000
        #define NE16_SUBTILE_REM2_HI_RESET                                   0x0

.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c

        
        #define NE16_SUBTILE_REM2_WI_GET(value)                    (GAP_BEXTRACTU((value),16,0))
        #define NE16_SUBTILE_REM2_WI_GETS(value)                   (GAP_BEXTRACT((value),16,0))
        #define NE16_SUBTILE_REM2_WI_SET(value,field)              (GAP_BINSERT((value),(field),16,0))
        #define NE16_SUBTILE_REM2_WI(val)                          ((val) << 0)
        
        #define NE16_SUBTILE_REM2_HI_GET(value)                    (GAP_BEXTRACTU((value),16,16))
        #define NE16_SUBTILE_REM2_HI_GETS(value)                   (GAP_BEXTRACT((value),16,16))
        #define NE16_SUBTILE_REM2_HI_SET(value,field)              (GAP_BINSERT((value),(field),16,16))
        #define NE16_SUBTILE_REM2_HI(val)                          ((val) << 16)

.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
            unsigned int wi              :16; // Wi remainder.
            unsigned int hi              :16; // Hi remainder.
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_subtile_rem2_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_subtile_rem2 : public vp::reg_32
        {
        public:
            inline void wi_set(uint32_t value);
            inline uint32_t wi_get();
            inline void hi_set(uint32_t value);
            inline uint32_t hi_get();
        };

|

.. _ne16_SUBTILE_NB0:

SUBTILE_NB0
"""""""""""



.. table:: 

    +-----+---+----+-------------+
    |Bit #|R/W|Name| Description |
    +=====+===+====+=============+
    |15:0 |R/W|KI  |Ki remainder.|
    +-----+---+----+-------------+
    |31:16|R/W|KO  |Ko remainder.|
    +-----+---+----+-------------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                #define NE16_SUBTILE_NB0_OFFSET                  0x68

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_subtile_nb0_get(uint32_t base);
        static inline void ne16_subtile_nb0_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c

        
        // Ki remainder. (access: R/W)
        #define NE16_SUBTILE_NB0_KI_BIT                                      0
        #define NE16_SUBTILE_NB0_KI_WIDTH                                    16
        #define NE16_SUBTILE_NB0_KI_MASK                                     0xffff
        #define NE16_SUBTILE_NB0_KI_RESET                                    0x0
        
        // Ko remainder. (access: R/W)
        #define NE16_SUBTILE_NB0_KO_BIT                                      16
        #define NE16_SUBTILE_NB0_KO_WIDTH                                    16
        #define NE16_SUBTILE_NB0_KO_MASK                                     0xffff0000
        #define NE16_SUBTILE_NB0_KO_RESET                                    0x0

.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c

        
        #define NE16_SUBTILE_NB0_KI_GET(value)                     (GAP_BEXTRACTU((value),16,0))
        #define NE16_SUBTILE_NB0_KI_GETS(value)                    (GAP_BEXTRACT((value),16,0))
        #define NE16_SUBTILE_NB0_KI_SET(value,field)               (GAP_BINSERT((value),(field),16,0))
        #define NE16_SUBTILE_NB0_KI(val)                           ((val) << 0)
        
        #define NE16_SUBTILE_NB0_KO_GET(value)                     (GAP_BEXTRACTU((value),16,16))
        #define NE16_SUBTILE_NB0_KO_GETS(value)                    (GAP_BEXTRACT((value),16,16))
        #define NE16_SUBTILE_NB0_KO_SET(value,field)               (GAP_BINSERT((value),(field),16,16))
        #define NE16_SUBTILE_NB0_KO(val)                           ((val) << 16)

.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
            unsigned int ki              :16; // Ki remainder.
            unsigned int ko              :16; // Ko remainder.
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_subtile_nb0_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_subtile_nb0 : public vp::reg_32
        {
        public:
            inline void ki_set(uint32_t value);
            inline uint32_t ki_get();
            inline void ko_set(uint32_t value);
            inline uint32_t ko_get();
        };

|

.. _ne16_SUBTILE_NB1:

SUBTILE_NB1
"""""""""""



.. table:: 

    +-----+---+----+-------------+
    |Bit #|R/W|Name| Description |
    +=====+===+====+=============+
    |15:0 |R/W|WO  |Wo remainder.|
    +-----+---+----+-------------+
    |31:16|R/W|HO  |Ho remainder.|
    +-----+---+----+-------------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                #define NE16_SUBTILE_NB1_OFFSET                  0x6c

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_subtile_nb1_get(uint32_t base);
        static inline void ne16_subtile_nb1_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c

        
        // Wo remainder. (access: R/W)
        #define NE16_SUBTILE_NB1_WO_BIT                                      0
        #define NE16_SUBTILE_NB1_WO_WIDTH                                    16
        #define NE16_SUBTILE_NB1_WO_MASK                                     0xffff
        #define NE16_SUBTILE_NB1_WO_RESET                                    0x0
        
        // Ho remainder. (access: R/W)
        #define NE16_SUBTILE_NB1_HO_BIT                                      16
        #define NE16_SUBTILE_NB1_HO_WIDTH                                    16
        #define NE16_SUBTILE_NB1_HO_MASK                                     0xffff0000
        #define NE16_SUBTILE_NB1_HO_RESET                                    0x0

.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c

        
        #define NE16_SUBTILE_NB1_WO_GET(value)                     (GAP_BEXTRACTU((value),16,0))
        #define NE16_SUBTILE_NB1_WO_GETS(value)                    (GAP_BEXTRACT((value),16,0))
        #define NE16_SUBTILE_NB1_WO_SET(value,field)               (GAP_BINSERT((value),(field),16,0))
        #define NE16_SUBTILE_NB1_WO(val)                           ((val) << 0)
        
        #define NE16_SUBTILE_NB1_HO_GET(value)                     (GAP_BEXTRACTU((value),16,16))
        #define NE16_SUBTILE_NB1_HO_GETS(value)                    (GAP_BEXTRACT((value),16,16))
        #define NE16_SUBTILE_NB1_HO_SET(value,field)               (GAP_BINSERT((value),(field),16,16))
        #define NE16_SUBTILE_NB1_HO(val)                           ((val) << 16)

.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
            unsigned int wo              :16; // Wo remainder.
            unsigned int ho              :16; // Ho remainder.
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_subtile_nb1_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_subtile_nb1 : public vp::reg_32
        {
        public:
            inline void wo_set(uint32_t value);
            inline uint32_t wo_get();
            inline void ho_set(uint32_t value);
            inline uint32_t ho_get();
        };

|

.. _ne16_PADDING:

PADDING
"""""""



.. table:: 

    +-----+---+------+------------------------------------------------------------------------------------------------+
    |Bit #|R/W| Name |                                          Description                                           |
    +=====+===+======+================================================================================================+
    |15:0 |R/W|VALUE |Padding value.                                                                                  |
    +-----+---+------+------------------------------------------------------------------------------------------------+
    |19:16|R/W|LEFT  |Number of spatially padded pixels in the LEFT subtile border.                                   |
    +-----+---+------+------------------------------------------------------------------------------------------------+
    |23:20|R/W|BOTTOM|Number of spatially padded pixels in the BOTTOM subtile border (counted from 5 pixels upward!). |
    +-----+---+------+------------------------------------------------------------------------------------------------+
    |27:24|R/W|RIGHT |Number of spatially padded pixels in the RIGHT subtile border (counted from 5 pixels leftward!).|
    +-----+---+------+------------------------------------------------------------------------------------------------+
    |31:28|R/W|TOP   |Number of spatially padded pixels in the TOP subtile border.                                    |
    +-----+---+------+------------------------------------------------------------------------------------------------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                #define NE16_PADDING_OFFSET                      0x70

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_padding_get(uint32_t base);
        static inline void ne16_padding_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c

        
        // Padding value. (access: R/W)
        #define NE16_PADDING_VALUE_BIT                                       0
        #define NE16_PADDING_VALUE_WIDTH                                     16
        #define NE16_PADDING_VALUE_MASK                                      0xffff
        #define NE16_PADDING_VALUE_RESET                                     0x0
        
        // Number of spatially padded pixels in the LEFT subtile border. (access: R/W)
        #define NE16_PADDING_LEFT_BIT                                        16
        #define NE16_PADDING_LEFT_WIDTH                                      4
        #define NE16_PADDING_LEFT_MASK                                       0xf0000
        #define NE16_PADDING_LEFT_RESET                                      0x0
        
        // Number of spatially padded pixels in the BOTTOM subtile border (counted from 5 pixels upward!). (access: R/W)
        #define NE16_PADDING_BOTTOM_BIT                                      20
        #define NE16_PADDING_BOTTOM_WIDTH                                    4
        #define NE16_PADDING_BOTTOM_MASK                                     0xf00000
        #define NE16_PADDING_BOTTOM_RESET                                    0x0
        
        // Number of spatially padded pixels in the RIGHT subtile border (counted from 5 pixels leftward!). (access: R/W)
        #define NE16_PADDING_RIGHT_BIT                                       24
        #define NE16_PADDING_RIGHT_WIDTH                                     4
        #define NE16_PADDING_RIGHT_MASK                                      0xf000000
        #define NE16_PADDING_RIGHT_RESET                                     0x0
        
        // Number of spatially padded pixels in the TOP subtile border. (access: R/W)
        #define NE16_PADDING_TOP_BIT                                         28
        #define NE16_PADDING_TOP_WIDTH                                       4
        #define NE16_PADDING_TOP_MASK                                        0xf0000000
        #define NE16_PADDING_TOP_RESET                                       0x0

.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c

        
        #define NE16_PADDING_VALUE_GET(value)                      (GAP_BEXTRACTU((value),16,0))
        #define NE16_PADDING_VALUE_GETS(value)                     (GAP_BEXTRACT((value),16,0))
        #define NE16_PADDING_VALUE_SET(value,field)                (GAP_BINSERT((value),(field),16,0))
        #define NE16_PADDING_VALUE(val)                            ((val) << 0)
        
        #define NE16_PADDING_LEFT_GET(value)                       (GAP_BEXTRACTU((value),4,16))
        #define NE16_PADDING_LEFT_GETS(value)                      (GAP_BEXTRACT((value),4,16))
        #define NE16_PADDING_LEFT_SET(value,field)                 (GAP_BINSERT((value),(field),4,16))
        #define NE16_PADDING_LEFT(val)                             ((val) << 16)
        
        #define NE16_PADDING_BOTTOM_GET(value)                     (GAP_BEXTRACTU((value),4,20))
        #define NE16_PADDING_BOTTOM_GETS(value)                    (GAP_BEXTRACT((value),4,20))
        #define NE16_PADDING_BOTTOM_SET(value,field)               (GAP_BINSERT((value),(field),4,20))
        #define NE16_PADDING_BOTTOM(val)                           ((val) << 20)
        
        #define NE16_PADDING_RIGHT_GET(value)                      (GAP_BEXTRACTU((value),4,24))
        #define NE16_PADDING_RIGHT_GETS(value)                     (GAP_BEXTRACT((value),4,24))
        #define NE16_PADDING_RIGHT_SET(value,field)                (GAP_BINSERT((value),(field),4,24))
        #define NE16_PADDING_RIGHT(val)                            ((val) << 24)
        
        #define NE16_PADDING_TOP_GET(value)                        (GAP_BEXTRACTU((value),4,28))
        #define NE16_PADDING_TOP_GETS(value)                       (GAP_BEXTRACT((value),4,28))
        #define NE16_PADDING_TOP_SET(value,field)                  (GAP_BINSERT((value),(field),4,28))
        #define NE16_PADDING_TOP(val)                              ((val) << 28)

.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
            unsigned int value           :16; // Padding value.
            unsigned int left            :4 ; // Number of spatially padded pixels in the LEFT subtile border.
            unsigned int bottom          :4 ; // Number of spatially padded pixels in the BOTTOM subtile border (counted from 5 pixels upward!).
            unsigned int right           :4 ; // Number of spatially padded pixels in the RIGHT subtile border (counted from 5 pixels leftward!).
            unsigned int top             :4 ; // Number of spatially padded pixels in the TOP subtile border.
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_padding_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_padding : public vp::reg_32
        {
        public:
            inline void value_set(uint32_t value);
            inline uint32_t value_get();
            inline void left_set(uint32_t value);
            inline uint32_t left_get();
            inline void bottom_set(uint32_t value);
            inline uint32_t bottom_get();
            inline void right_set(uint32_t value);
            inline uint32_t right_get();
            inline void top_set(uint32_t value);
            inline uint32_t top_get();
        };

|

.. _ne16_WEIGHT_OFFSET:

WEIGHT_OFFSET
"""""""""""""



.. table:: 

    +-----+---+----+-----------+
    |Bit #|R/W|Name|Description|
    +=====+===+====+===========+
    +-----+---+----+-----------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                #define NE16_WEIGHT_OFFSET_OFFSET                0x74

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_weight_offset_get(uint32_t base);
        static inline void ne16_weight_offset_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c


.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_weight_offset_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_weight_offset : public vp::reg_32
        {
        public:
        };

|

.. _ne16_FILTER_MASK:

FILTER_MASK
"""""""""""



.. table:: 

    +-----+---+------+------------+
    |Bit #|R/W| Name |Description |
    +=====+===+======+============+
    |7:0  |R/W|LEFT  |Left mask.  |
    +-----+---+------+------------+
    |15:8 |R/W|BOTTOM|Bottom mask.|
    +-----+---+------+------------+
    |23:16|R/W|RIGHT |Right mask. |
    +-----+---+------+------------+
    |31:24|R/W|TOP   |Top mask.   |
    +-----+---+------+------------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                #define NE16_FILTER_MASK_OFFSET                  0x78

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_filter_mask_get(uint32_t base);
        static inline void ne16_filter_mask_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c

        
        // Left mask. (access: R/W)
        #define NE16_FILTER_MASK_LEFT_BIT                                    0
        #define NE16_FILTER_MASK_LEFT_WIDTH                                  8
        #define NE16_FILTER_MASK_LEFT_MASK                                   0xff
        #define NE16_FILTER_MASK_LEFT_RESET                                  0x0
        
        // Bottom mask. (access: R/W)
        #define NE16_FILTER_MASK_BOTTOM_BIT                                  8
        #define NE16_FILTER_MASK_BOTTOM_WIDTH                                8
        #define NE16_FILTER_MASK_BOTTOM_MASK                                 0xff00
        #define NE16_FILTER_MASK_BOTTOM_RESET                                0x0
        
        // Right mask. (access: R/W)
        #define NE16_FILTER_MASK_RIGHT_BIT                                   16
        #define NE16_FILTER_MASK_RIGHT_WIDTH                                 8
        #define NE16_FILTER_MASK_RIGHT_MASK                                  0xff0000
        #define NE16_FILTER_MASK_RIGHT_RESET                                 0x0
        
        // Top mask. (access: R/W)
        #define NE16_FILTER_MASK_TOP_BIT                                     24
        #define NE16_FILTER_MASK_TOP_WIDTH                                   8
        #define NE16_FILTER_MASK_TOP_MASK                                    0xff000000
        #define NE16_FILTER_MASK_TOP_RESET                                   0x0

.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c

        
        #define NE16_FILTER_MASK_LEFT_GET(value)                   (GAP_BEXTRACTU((value),8,0))
        #define NE16_FILTER_MASK_LEFT_GETS(value)                  (GAP_BEXTRACT((value),8,0))
        #define NE16_FILTER_MASK_LEFT_SET(value,field)             (GAP_BINSERT((value),(field),8,0))
        #define NE16_FILTER_MASK_LEFT(val)                         ((val) << 0)
        
        #define NE16_FILTER_MASK_BOTTOM_GET(value)                 (GAP_BEXTRACTU((value),8,8))
        #define NE16_FILTER_MASK_BOTTOM_GETS(value)                (GAP_BEXTRACT((value),8,8))
        #define NE16_FILTER_MASK_BOTTOM_SET(value,field)           (GAP_BINSERT((value),(field),8,8))
        #define NE16_FILTER_MASK_BOTTOM(val)                       ((val) << 8)
        
        #define NE16_FILTER_MASK_RIGHT_GET(value)                  (GAP_BEXTRACTU((value),8,16))
        #define NE16_FILTER_MASK_RIGHT_GETS(value)                 (GAP_BEXTRACT((value),8,16))
        #define NE16_FILTER_MASK_RIGHT_SET(value,field)            (GAP_BINSERT((value),(field),8,16))
        #define NE16_FILTER_MASK_RIGHT(val)                        ((val) << 16)
        
        #define NE16_FILTER_MASK_TOP_GET(value)                    (GAP_BEXTRACTU((value),8,24))
        #define NE16_FILTER_MASK_TOP_GETS(value)                   (GAP_BEXTRACT((value),8,24))
        #define NE16_FILTER_MASK_TOP_SET(value,field)              (GAP_BINSERT((value),(field),8,24))
        #define NE16_FILTER_MASK_TOP(val)                          ((val) << 24)

.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
            unsigned int left            :8 ; // Left mask.
            unsigned int bottom          :8 ; // Bottom mask.
            unsigned int right           :8 ; // Right mask.
            unsigned int top             :8 ; // Top mask.
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_filter_mask_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_filter_mask : public vp::reg_32
        {
        public:
            inline void left_set(uint32_t value);
            inline uint32_t left_get();
            inline void bottom_set(uint32_t value);
            inline uint32_t bottom_get();
            inline void right_set(uint32_t value);
            inline uint32_t right_get();
            inline void top_set(uint32_t value);
            inline uint32_t top_get();
        };

|

.. _ne16_CONFIG0:

CONFIG0
"""""""





.. table:: 

    +-----+---+-----------+--------------------------------------------------------------------------------+
    |Bit #|R/W|   Name    |                                  Description                                   |
    +=====+===+===========+================================================================================+
    |2:0  |R/W|QWM1       |Weight bits minus 1.                                                            |
    +-----+---+-----------+--------------------------------------------------------------------------------+
    |3    |R/W|MODE16     |16-bit input data mode.                                                         |
    +-----+---+-----------+--------------------------------------------------------------------------------+
    |4    |R/W|STREAMOUT  |Streamout / quantization (1=quantization+streamout, 0=streamout only).          |
    +-----+---+-----------+--------------------------------------------------------------------------------+
    |6:5  |R/W|FILTER_MODE|Filter mode (11=reserved, 10=1x1, 01=3x3 depthwise, 00=3x3).                    |
    +-----+---+-----------+--------------------------------------------------------------------------------+
    |7    |R/W|LINEAR     |Linear mode (experimental).                                                     |
    +-----+---+-----------+--------------------------------------------------------------------------------+
    |8    |R/W|STRIDED_2X2|2x2 strided mode (experimental).                                                |
    +-----+---+-----------+--------------------------------------------------------------------------------+
    |10:9 |R/W|RES1       |Reserved.                                                                       |
    +-----+---+-----------+--------------------------------------------------------------------------------+
    |11   |R/W|ROUND      |Rounding mode (0=round, 1=do not round).                                        |
    +-----+---+-----------+--------------------------------------------------------------------------------+
    |13:12|R/W|NORM_BITS  |Normalization bits (00=8b, 01=16b, 10=32b).                                     |
    +-----+---+-----------+--------------------------------------------------------------------------------+
    |14   |R/W|STREAMIN   |Streamin mode (1=do streamin, 0=do not streamin).                               |
    +-----+---+-----------+--------------------------------------------------------------------------------+
    |15   |R/W|WEIGHT_OFFS|Weight offset cfg (0=symmetric weights, 1=use layer-wise weight_offset).        |
    +-----+---+-----------+--------------------------------------------------------------------------------+
    |20:16|R/W|RIGHT_SHIFT|Quantization right shift.                                                       |
    +-----+---+-----------+--------------------------------------------------------------------------------+
    |22:21|R/W|QUANT_BITS |Quantization bits (00=8b, 01=16b, 10=32b).                                      |
    +-----+---+-----------+--------------------------------------------------------------------------------+
    |23   |R/W|QUANT_RECT |Quantization rect(0=rectify, consider as unsigned; 1=do not rectify, keep sign).|
    +-----+---+-----------+--------------------------------------------------------------------------------+
    |31:24|R/W|RES2       |Reserved.                                                                       |
    +-----+---+-----------+--------------------------------------------------------------------------------+

Generated headers
"""""""""""""""""


.. toggle-header::
    :header: *Register map C offsets*

    .. code-block:: c

        
                //   
                #define NE16_CONFIG0_OFFSET                      0x7c

.. toggle-header::
    :header: *Register accessors*

    .. code-block:: c


        static inline uint32_t ne16_config0_get(uint32_t base);
        static inline void ne16_config0_set(uint32_t base, uint32_t value);

.. toggle-header::
    :header: *Register fields defines*

    .. code-block:: c

        
        // Weight bits minus 1. (access: R/W)
        #define NE16_CONFIG0_QWM1_BIT                                        0
        #define NE16_CONFIG0_QWM1_WIDTH                                      3
        #define NE16_CONFIG0_QWM1_MASK                                       0x7
        #define NE16_CONFIG0_QWM1_RESET                                      0x0
        
        // 16-bit input data mode. (access: R/W)
        #define NE16_CONFIG0_MODE16_BIT                                      3
        #define NE16_CONFIG0_MODE16_WIDTH                                    1
        #define NE16_CONFIG0_MODE16_MASK                                     0x8
        #define NE16_CONFIG0_MODE16_RESET                                    0x0
        
        // Streamout / quantization (1=quantization+streamout, 0=streamout only). (access: R/W)
        #define NE16_CONFIG0_STREAMOUT_BIT                                   4
        #define NE16_CONFIG0_STREAMOUT_WIDTH                                 1
        #define NE16_CONFIG0_STREAMOUT_MASK                                  0x10
        #define NE16_CONFIG0_STREAMOUT_RESET                                 0x0
        
        // Filter mode (11=reserved, 10=1x1, 01=3x3 depthwise, 00=3x3). (access: R/W)
        #define NE16_CONFIG0_FILTER_MODE_BIT                                 5
        #define NE16_CONFIG0_FILTER_MODE_WIDTH                               2
        #define NE16_CONFIG0_FILTER_MODE_MASK                                0x60
        #define NE16_CONFIG0_FILTER_MODE_RESET                               0x0
        
        // Linear mode (experimental). (access: R/W)
        #define NE16_CONFIG0_LINEAR_BIT                                      7
        #define NE16_CONFIG0_LINEAR_WIDTH                                    1
        #define NE16_CONFIG0_LINEAR_MASK                                     0x80
        #define NE16_CONFIG0_LINEAR_RESET                                    0x0
        
        // 2x2 strided mode (experimental). (access: R/W)
        #define NE16_CONFIG0_STRIDED_2X2_BIT                                 8
        #define NE16_CONFIG0_STRIDED_2X2_WIDTH                               1
        #define NE16_CONFIG0_STRIDED_2X2_MASK                                0x100
        #define NE16_CONFIG0_STRIDED_2X2_RESET                               0x0
        
        // Reserved. (access: R/W)
        #define NE16_CONFIG0_RES1_BIT                                        9
        #define NE16_CONFIG0_RES1_WIDTH                                      2
        #define NE16_CONFIG0_RES1_MASK                                       0x600
        #define NE16_CONFIG0_RES1_RESET                                      0x0
        
        // Rounding mode (0=round, 1=do not round). (access: R/W)
        #define NE16_CONFIG0_ROUND_BIT                                       11
        #define NE16_CONFIG0_ROUND_WIDTH                                     1
        #define NE16_CONFIG0_ROUND_MASK                                      0x800
        #define NE16_CONFIG0_ROUND_RESET                                     0x0
        
        // Normalization bits (00=8b, 01=16b, 10=32b). (access: R/W)
        #define NE16_CONFIG0_NORM_BITS_BIT                                   12
        #define NE16_CONFIG0_NORM_BITS_WIDTH                                 2
        #define NE16_CONFIG0_NORM_BITS_MASK                                  0x3000
        #define NE16_CONFIG0_NORM_BITS_RESET                                 0x0
        
        // Streamin mode (1=do streamin, 0=do not streamin). (access: R/W)
        #define NE16_CONFIG0_STREAMIN_BIT                                    14
        #define NE16_CONFIG0_STREAMIN_WIDTH                                  1
        #define NE16_CONFIG0_STREAMIN_MASK                                   0x4000
        #define NE16_CONFIG0_STREAMIN_RESET                                  0x0
        
        // Weight offset cfg (0=symmetric weights, 1=use layer-wise weight_offset). (access: R/W)
        #define NE16_CONFIG0_WEIGHT_OFFS_BIT                                 15
        #define NE16_CONFIG0_WEIGHT_OFFS_WIDTH                               1
        #define NE16_CONFIG0_WEIGHT_OFFS_MASK                                0x8000
        #define NE16_CONFIG0_WEIGHT_OFFS_RESET                               0x0
        
        // Quantization right shift. (access: R/W)
        #define NE16_CONFIG0_RIGHT_SHIFT_BIT                                 16
        #define NE16_CONFIG0_RIGHT_SHIFT_WIDTH                               5
        #define NE16_CONFIG0_RIGHT_SHIFT_MASK                                0x1f0000
        #define NE16_CONFIG0_RIGHT_SHIFT_RESET                               0x0
        
        // Quantization bits (00=8b, 01=16b, 10=32b). (access: R/W)
        #define NE16_CONFIG0_QUANT_BITS_BIT                                  21
        #define NE16_CONFIG0_QUANT_BITS_WIDTH                                2
        #define NE16_CONFIG0_QUANT_BITS_MASK                                 0x600000
        #define NE16_CONFIG0_QUANT_BITS_RESET                                0x0
        
        // Quantization rect(0=rectify, consider as unsigned; 1=do not rectify, keep sign). (access: R/W)
        #define NE16_CONFIG0_QUANT_RECT_BIT                                  23
        #define NE16_CONFIG0_QUANT_RECT_WIDTH                                1
        #define NE16_CONFIG0_QUANT_RECT_MASK                                 0x800000
        #define NE16_CONFIG0_QUANT_RECT_RESET                                0x0
        
        // Reserved. (access: R/W)
        #define NE16_CONFIG0_RES2_BIT                                        24
        #define NE16_CONFIG0_RES2_WIDTH                                      8
        #define NE16_CONFIG0_RES2_MASK                                       0xff000000
        #define NE16_CONFIG0_RES2_RESET                                      0x0

.. toggle-header::
    :header: *Register fields macros*

    .. code-block:: c

        
        #define NE16_CONFIG0_QWM1_GET(value)                       (GAP_BEXTRACTU((value),3,0))
        #define NE16_CONFIG0_QWM1_GETS(value)                      (GAP_BEXTRACT((value),3,0))
        #define NE16_CONFIG0_QWM1_SET(value,field)                 (GAP_BINSERT((value),(field),3,0))
        #define NE16_CONFIG0_QWM1(val)                             ((val) << 0)
        
        #define NE16_CONFIG0_MODE16_GET(value)                     (GAP_BEXTRACTU((value),1,3))
        #define NE16_CONFIG0_MODE16_GETS(value)                    (GAP_BEXTRACT((value),1,3))
        #define NE16_CONFIG0_MODE16_SET(value,field)               (GAP_BINSERT((value),(field),1,3))
        #define NE16_CONFIG0_MODE16(val)                           ((val) << 3)
        
        #define NE16_CONFIG0_STREAMOUT_GET(value)                  (GAP_BEXTRACTU((value),1,4))
        #define NE16_CONFIG0_STREAMOUT_GETS(value)                 (GAP_BEXTRACT((value),1,4))
        #define NE16_CONFIG0_STREAMOUT_SET(value,field)            (GAP_BINSERT((value),(field),1,4))
        #define NE16_CONFIG0_STREAMOUT(val)                        ((val) << 4)
        
        #define NE16_CONFIG0_FILTER_MODE_GET(value)                (GAP_BEXTRACTU((value),2,5))
        #define NE16_CONFIG0_FILTER_MODE_GETS(value)               (GAP_BEXTRACT((value),2,5))
        #define NE16_CONFIG0_FILTER_MODE_SET(value,field)          (GAP_BINSERT((value),(field),2,5))
        #define NE16_CONFIG0_FILTER_MODE(val)                      ((val) << 5)
        
        #define NE16_CONFIG0_LINEAR_GET(value)                     (GAP_BEXTRACTU((value),1,7))
        #define NE16_CONFIG0_LINEAR_GETS(value)                    (GAP_BEXTRACT((value),1,7))
        #define NE16_CONFIG0_LINEAR_SET(value,field)               (GAP_BINSERT((value),(field),1,7))
        #define NE16_CONFIG0_LINEAR(val)                           ((val) << 7)
        
        #define NE16_CONFIG0_STRIDED_2X2_GET(value)                (GAP_BEXTRACTU((value),1,8))
        #define NE16_CONFIG0_STRIDED_2X2_GETS(value)               (GAP_BEXTRACT((value),1,8))
        #define NE16_CONFIG0_STRIDED_2X2_SET(value,field)          (GAP_BINSERT((value),(field),1,8))
        #define NE16_CONFIG0_STRIDED_2X2(val)                      ((val) << 8)
        
        #define NE16_CONFIG0_RES1_GET(value)                       (GAP_BEXTRACTU((value),2,9))
        #define NE16_CONFIG0_RES1_GETS(value)                      (GAP_BEXTRACT((value),2,9))
        #define NE16_CONFIG0_RES1_SET(value,field)                 (GAP_BINSERT((value),(field),2,9))
        #define NE16_CONFIG0_RES1(val)                             ((val) << 9)
        
        #define NE16_CONFIG0_ROUND_GET(value)                      (GAP_BEXTRACTU((value),1,11))
        #define NE16_CONFIG0_ROUND_GETS(value)                     (GAP_BEXTRACT((value),1,11))
        #define NE16_CONFIG0_ROUND_SET(value,field)                (GAP_BINSERT((value),(field),1,11))
        #define NE16_CONFIG0_ROUND(val)                            ((val) << 11)
        
        #define NE16_CONFIG0_NORM_BITS_GET(value)                  (GAP_BEXTRACTU((value),2,12))
        #define NE16_CONFIG0_NORM_BITS_GETS(value)                 (GAP_BEXTRACT((value),2,12))
        #define NE16_CONFIG0_NORM_BITS_SET(value,field)            (GAP_BINSERT((value),(field),2,12))
        #define NE16_CONFIG0_NORM_BITS(val)                        ((val) << 12)
        
        #define NE16_CONFIG0_STREAMIN_GET(value)                   (GAP_BEXTRACTU((value),1,14))
        #define NE16_CONFIG0_STREAMIN_GETS(value)                  (GAP_BEXTRACT((value),1,14))
        #define NE16_CONFIG0_STREAMIN_SET(value,field)             (GAP_BINSERT((value),(field),1,14))
        #define NE16_CONFIG0_STREAMIN(val)                         ((val) << 14)
        
        #define NE16_CONFIG0_WEIGHT_OFFS_GET(value)                (GAP_BEXTRACTU((value),1,15))
        #define NE16_CONFIG0_WEIGHT_OFFS_GETS(value)               (GAP_BEXTRACT((value),1,15))
        #define NE16_CONFIG0_WEIGHT_OFFS_SET(value,field)          (GAP_BINSERT((value),(field),1,15))
        #define NE16_CONFIG0_WEIGHT_OFFS(val)                      ((val) << 15)
        
        #define NE16_CONFIG0_RIGHT_SHIFT_GET(value)                (GAP_BEXTRACTU((value),5,16))
        #define NE16_CONFIG0_RIGHT_SHIFT_GETS(value)               (GAP_BEXTRACT((value),5,16))
        #define NE16_CONFIG0_RIGHT_SHIFT_SET(value,field)          (GAP_BINSERT((value),(field),5,16))
        #define NE16_CONFIG0_RIGHT_SHIFT(val)                      ((val) << 16)
        
        #define NE16_CONFIG0_QUANT_BITS_GET(value)                 (GAP_BEXTRACTU((value),2,21))
        #define NE16_CONFIG0_QUANT_BITS_GETS(value)                (GAP_BEXTRACT((value),2,21))
        #define NE16_CONFIG0_QUANT_BITS_SET(value,field)           (GAP_BINSERT((value),(field),2,21))
        #define NE16_CONFIG0_QUANT_BITS(val)                       ((val) << 21)
        
        #define NE16_CONFIG0_QUANT_RECT_GET(value)                 (GAP_BEXTRACTU((value),1,23))
        #define NE16_CONFIG0_QUANT_RECT_GETS(value)                (GAP_BEXTRACT((value),1,23))
        #define NE16_CONFIG0_QUANT_RECT_SET(value,field)           (GAP_BINSERT((value),(field),1,23))
        #define NE16_CONFIG0_QUANT_RECT(val)                       ((val) << 23)
        
        #define NE16_CONFIG0_RES2_GET(value)                       (GAP_BEXTRACTU((value),8,24))
        #define NE16_CONFIG0_RES2_GETS(value)                      (GAP_BEXTRACT((value),8,24))
        #define NE16_CONFIG0_RES2_SET(value,field)                 (GAP_BINSERT((value),(field),8,24))
        #define NE16_CONFIG0_RES2(val)                             ((val) << 24)

.. toggle-header::
    :header: *Register fields structures*

    .. code-block:: c

        
        typedef union {
          struct {
            unsigned int qwm1            :3 ; // Weight bits minus 1.
            unsigned int mode16          :1 ; // 16-bit input data mode.
            unsigned int streamout       :1 ; // Streamout / quantization (1=quantization+streamout, 0=streamout only).
            unsigned int filter_mode     :2 ; // Filter mode (11=reserved, 10=1x1, 01=3x3 depthwise, 00=3x3).
            unsigned int linear          :1 ; // Linear mode (experimental).
            unsigned int strided_2x2     :1 ; // 2x2 strided mode (experimental).
            unsigned int res1            :2 ; // Reserved.
            unsigned int round           :1 ; // Rounding mode (0=round, 1=do not round).
            unsigned int norm_bits       :2 ; // Normalization bits (00=8b, 01=16b, 10=32b).
            unsigned int streamin        :1 ; // Streamin mode (1=do streamin, 0=do not streamin).
            unsigned int weight_offs     :1 ; // Weight offset cfg (0=symmetric weights, 1=use layer-wise weight_offset).
            unsigned int right_shift     :5 ; // Quantization right shift.
            unsigned int quant_bits      :2 ; // Quantization bits (00=8b, 01=16b, 10=32b).
            unsigned int quant_rect      :1 ; // Quantization rect(0=rectify, consider as unsigned; 1=do not rectify, keep sign).
            unsigned int res2            :8 ; // Reserved.
          };
          unsigned int raw;
        } __attribute__((packed)) ne16_config0_t;

.. toggle-header::
    :header: *GVSOC registers*

    .. code-block:: c

        
        class vp_ne16_config0 : public vp::reg_32
        {
        public:
            inline void qwm1_set(uint32_t value);
            inline uint32_t qwm1_get();
            inline void mode16_set(uint32_t value);
            inline uint32_t mode16_get();
            inline void streamout_set(uint32_t value);
            inline uint32_t streamout_get();
            inline void filter_mode_set(uint32_t value);
            inline uint32_t filter_mode_get();
            inline void linear_set(uint32_t value);
            inline uint32_t linear_get();
            inline void strided_2x2_set(uint32_t value);
            inline uint32_t strided_2x2_get();
            inline void res1_set(uint32_t value);
            inline uint32_t res1_get();
            inline void round_set(uint32_t value);
            inline uint32_t round_get();
            inline void norm_bits_set(uint32_t value);
            inline uint32_t norm_bits_get();
            inline void streamin_set(uint32_t value);
            inline uint32_t streamin_get();
            inline void weight_offs_set(uint32_t value);
            inline uint32_t weight_offs_get();
            inline void right_shift_set(uint32_t value);
            inline uint32_t right_shift_get();
            inline void quant_bits_set(uint32_t value);
            inline uint32_t quant_bits_get();
            inline void quant_rect_set(uint32_t value);
            inline uint32_t quant_rect_get();
            inline void res2_set(uint32_t value);
            inline uint32_t res2_get();
        };

|
