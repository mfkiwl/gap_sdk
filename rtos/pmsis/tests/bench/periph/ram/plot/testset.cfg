from plptest import *
import os

TestConfig = c = {}

max_error_corners = 0.20
max_error_nominal = 0.10

def check_score(score, expected, max_error):
    if score.value != 0:
        error = abs(float(score.value - expected)) / score.value

        print ('Checking score (description: %s, value: %f, expected: %f, error: %f, max_error: %f)' % (score.name, score.value, expected, error, max_error))
        if error > max_error:
            print ('Detected score error')
            return True

    return False



class Checker(object):
  def __init__(self, expected, max_error):
    self.expected = expected
    self.max_error = max_error

  def __call__(self, score):
    return check_score(score, self.expected, self.max_error)


def get_accuracy_scores(soc_freq, hyper_freq):
    scores = []

    sizes_1d = [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192]
    transfers_1d = ['hyperram.bw_size_%d_bandwidth_1d_read_soc%d_itf%d', 'hyperram.bw_size_%d_misaligned_bandwidth_1d_read_soc%d_itf%d', 'hyperram.bw_size_%d_bandwidth_1d_write_soc%d_itf%d', 'hyperram.bw_size_%d_misaligned_bandwidth_1d_write_soc%d_itf%d']

    if soc_freq == 200 and hyper_freq == 200:
        expected_1d = [
            [4015056, 8020050, 15533980, 30992736, 57079152, 89354275, 123003003, 152608047, 168041025, 179747668, 184587652, 188127224],
            [4015056, 7766990, 15533980, 31030303, 57079152, 89043478, 122929171, 152608047, 168041025, 179649122, 184660467, 188116424],
            [4092071, 8194622, 15841584, 31683168, 58918296, 90140845, 124878048, 153293413, 169852788, 181419554, 186467876, 189975939],
            [4097311, 8194622, 15841584, 31604938, 58447488, 91592128, 124878048, 153465717, 170064355, 181399468, 186595296, 189975939],
        ]
    elif soc_freq == 10 and hyper_freq == 200:
        expected_1d = [
            [212201, 424403, 848806, 1688654, 3395225, 6336633, 12219570, 20117878, 26718851, 31838321, 35547841, 37642734],
            [212201, 422163, 848806, 1697612, 3395225, 6131736, 10291457, 13828494, 16357827, 18008353, 18927911, 19458432],
            [216802, 433604, 867208, 1734417, 3454790, 6243902, 11544532, 15975039, 19931873, 22812587, 24589524, 25586007],
            [216802, 431266, 867208, 1725067, 3220125, 6228710, 9808429, 13204384, 15900621, 17716262, 18791145, 19375591 ],
        ]
    elif soc_freq == 100 and hyper_freq == 100:
        expected_1d = [
            [1970443, 3940886, 7628128, 15219976, 28287292, 43835616, 61427714, 72341928, 81723862, 86068501, 88614852, 90302312],
            [1970443, 3940886, 7628128, 15256257, 28318584, 44599303, 60879904, 72239858, 81626145, 86322444, 88504753, 90153245],
            [2080624, 4020100, 7776427, 15552855, 28796400, 45189761, 62098241, 73855030, 83133752, 87925297, 91007054, 92296425],
            [2080624, 4025157, 7776427, 15515151, 28796400, 45349867, 61910519, 74015178, 83133752, 87859287, 90825433, 92275632],
        ]
    else:
        raise RuntimeError('Unsupported frequencies (soc: %d, hyper: %d)' % (soc_freq, hyper_freq))

    transfer_id = 0
    for transfer in transfers_1d:
        size_id = 0
        for size in sizes_1d:
            max_error = max_error_nominal if size > 16 and soc_freq == 200 and hyper_freq == 200 else max_error_corners
            expected = expected_1d[transfer_id][size_id]
            scores.append(Score(transfer % (size, soc_freq, hyper_freq)   , score='value', checker=Checker(expected=expected, max_error=max_error)))
            size_id += 1
        transfer_id += 1

    sizes_2d = [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]
    transfers_2d = ['hyperram.bw_len_%d_bandwidth_2d_read_soc%d_itf%d', 'hyperram.bw_len_%d_misaligned_bandwidth_2d_read_soc%d_itf%d', 'hyperram.bw_len_%d_bandwidth_2d_write_soc%d_itf%d', 'hyperram.bw_len_%d_misaligned_bandwidth_2d_write_soc%d_itf%d']

    if soc_freq == 200 and hyper_freq == 200:
        expected_2d = [
            [21567827, 37528273, 67536429, 99284935, 129766548, 155586154, 174502076, 184681282, 184608450, 187508225, 187374199],
            [21567969, 37528273, 67534341, 99292456, 129761409, 155589848, 174511370, 184681282, 184546068, 187497496, 187347417],
            [23487332, 41973126, 69209648, 102416002, 134819995, 160105538, 176637378, 186266484, 186611236, 189202609, 189311918],
            [23487501, 41973395, 69211109, 102425606, 134778406, 160136835, 176656423, 186240018, 186579359, 189202609, 189344735],
        ]
    elif soc_freq == 10 and hyper_freq == 200:
        expected_2d = [
            [20921976, 35632883, 37755501, 37699033, 35617391, 33757082, 36139847, 37738108, 37582291, 37444863, 37655711],
            [19473465, 19478095, 19473465, 19468837, 19473465, 19478095, 19479253, 19469994, 19471150, 19478095, 19459587],
            [22703526, 25614007, 25614007, 25614007, 25614007, 25614007, 25614007, 25614007, 25614007, 25606001, 25614007],
            [19391643, 19391643, 19391643, 19392791, 19391643, 19391643, 19391643, 19391643, 19391643, 19392791, 19391643],
        ]
    elif soc_freq == 100 and hyper_freq == 100:
        expected_2d = [
            [10805534, 18768220, 31494065, 48550220, 65427390, 78270631, 87481645, 87026266, 89743379, 89965131, 89846727],
            [10805427, 18769726, 31496486, 48491305, 65401273, 78360475, 87500333, 86984683, 89743379, 89920693, 89935501],
            [12669494, 22594413, 36598795, 53667884, 70467301, 81425341, 89454287, 89405473, 91581889, 91763981, 92262642],
            [12668906, 22595504, 36534730, 53665247, 70491556, 81423317, 89451845, 89427433, 91584448, 91728018, 92379690],
        ]
    else:
        raise RuntimeError('Unsupported frequencies (soc: %d, hyper: %d)' % (soc_freq, hyper_freq))

    transfer_id = 0
    for transfer in transfers_2d:
        size_id = 0
        for size in sizes_2d:
            max_error = max_error_nominal if size > 16 and soc_freq == 200 and hyper_freq == 200 else max_error_corners
            expected = expected_2d[transfer_id][size_id]
            scores.append(Score(transfer % (size, soc_freq, hyper_freq)   , score='value', checker=Checker(expected=expected, max_error=max_error)))
            size_id += 1
        transfer_id += 1

    return scores



def get_test(soc_frequency, hyper_frequency, gvsoc_accuracy_check=True):

    name = 'hyperram_soc%d_hyper%d' % (soc_frequency, hyper_frequency)
    flags = 'build_dir_ext=%s FULL_PLOT=1 RAM_TYPE=HYPERRAM FC_FREQUENCY=%d ITF_FREQUENCY=%d' % (name, soc_frequency, hyper_frequency)

    test = Test(
        name = 'ram:' + name,
        commands = [
            Shell('clean', 'make clean %s' % flags),
            Shell('build', 'make all %s' % flags),
            Shell('run',   'make run %s' % flags),
            Check_score('score')
        ],
        timeout = 1000000,
        restrict = 'config.get("**/fc") is not None',
        scores = get_accuracy_scores(soc_frequency, hyper_frequency) if gvsoc_accuracy_check else get_scores(soc_frequency, hyper_frequency)
    )
  
    return test


def get_scores(soc_freq, hyper_freq):

    return [
        Score('hyperram.max_bandwidth_1d_read_soc200_itf200'   , score='value / 50000000'),
        Score('hyperram.90_bandwidth_1d_read_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.50_bandwidth_1d_read_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.10_bandwidth_1d_read_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.max_bandwidth_1d_read_instr_soc200_itf200'   , score='1.0/math.log(value/100+10, 10)'),

        Score('hyperram.max_misaligned_bandwidth_1d_read_soc200_itf200'   , score='value / 50000000'),
        Score('hyperram.90_misaligned_bandwidth_1d_read_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.50_misaligned_bandwidth_1d_read_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.10_misaligned_bandwidth_1d_read_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.max_misaligned_bandwidth_1d_read_instr_soc200_itf200'   , score='1.0/math.log(value/100+10, 10)'),

        Score('hyperram.max_bandwidth_2d_read_soc200_itf200'   , score='value / 50000000'),
        Score('hyperram.90_bandwidth_2d_read_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.50_bandwidth_2d_read_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.10_bandwidth_2d_read_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.max_bandwidth_2d_read_instr_soc200_itf200'   , score='1.0/math.log(value/100+10, 10)'),

        Score('hyperram.max_misaligned_bandwidth_2d_read_soc200_itf200'   , score='value / 50000000'),
        Score('hyperram.90_misaligned_bandwidth_2d_read_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.50_misaligned_bandwidth_2d_read_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.10_misaligned_bandwidth_2d_read_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.max_misaligned_bandwidth_2d_read_instr_soc200_itf200'   , score='1.0/math.log(value/100+10, 10)'),

        Score('hyperram.max_bandwidth_1d_write_soc200_itf200'   , score='value / 50000000'),
        Score('hyperram.90_bandwidth_1d_write_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.50_bandwidth_1d_write_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.10_bandwidth_1d_write_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.max_bandwidth_1d_write_instr_soc200_itf200'   , score='1.0/math.log(value/100+10, 10)'),
        
        Score('hyperram.max_misaligned_bandwidth_1d_write_soc200_itf200'   , score='value / 50000000'),
        Score('hyperram.90_misaligned_bandwidth_1d_write_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.50_misaligned_bandwidth_1d_write_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.10_misaligned_bandwidth_1d_write_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.max_misaligned_bandwidth_1d_write_instr_soc200_itf200'   , score='1.0/math.log(value/100+10, 10)'),

        Score('hyperram.max_bandwidth_2d_write_soc200_itf200'   , score='value / 50000000'),
        Score('hyperram.90_bandwidth_2d_write_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.50_bandwidth_2d_write_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.10_bandwidth_2d_write_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.max_bandwidth_2d_write_instr_soc200_itf200'   , score='1.0/math.log(value/100+10, 10)'),

        Score('hyperram.max_misaligned_bandwidth_2d_write_soc200_itf200'   , score='value / 50000000'),
        Score('hyperram.90_misaligned_bandwidth_2d_write_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.50_misaligned_bandwidth_2d_write_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.10_misaligned_bandwidth_2d_write_soc200_itf200', score='(8192 - value) / 8192'),
        Score('hyperram.max_misaligned_bandwidth_2d_write_instr_soc200_itf200'   , score='1.0/math.log(value/100+10, 10)'),
    ]



if os.environ.get('GVSOC_ACCURACY_CHECK') is not None:

    c['tests'] = [
        get_test(200, 200, gvsoc_accuracy_check=True),
        get_test(10, 200, gvsoc_accuracy_check=True),
        get_test(100, 100, gvsoc_accuracy_check=True)
    ]

else:

    c['tests'] = [ get_test(200, 200) ]

