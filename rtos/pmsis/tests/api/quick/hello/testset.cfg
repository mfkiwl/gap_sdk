from plptest import *

def check_output(config, output):

    if output.find('Hello') == -1:
        return (False, "Didn't find output string")

    return (True, None)


# Called by plptest to declare the tests
def get_tests(config):

    #
    # Test list decription
    #
    Sdk_test(config, 'hello:default', checker=check_output, flags='')
    Sdk_test(config, 'hello:cluster', checker=check_output, flags='CONFIG_HELLOWORLD_CLUSTER=1')
    Sdk_test(config, 'hello:jtag_no_efuse', checker=check_output, flags='CONFIG_JTAG_FORCE=1 CONFIG_NO_EFUSE=1')
    Sdk_test(config, 'hello:jtag_force', checker=check_output, flags='CONFIG_JTAG_FORCE=1')
    Sdk_test(config, 'hello:jtag', checker=check_output, flags='CONFIG_BOOT_MODE=jtag')
    Sdk_test(config, 'hello:mram', checker=check_output, flags='CONFIG_BOOT_DEVICE=mram')
    Sdk_test(config, 'hello:spi', checker=check_output, flags='CONFIG_BOOT_DEVICE=spiflash')
    Sdk_test(config, 'hello:xip', checker=check_output, flags='CONFIG_XIP=1')
    Sdk_test(config, 'hello:cluster_xip', checker=check_output, flags='CONFIG_XIP=1 CONFIG_HELLOWORLD_CLUSTER=1')
    Sdk_test(config, 'hello:xip_mram', checker=check_output, flags='CONFIG_XIP=1 CONFIG_BOOT_DEVICE=mram')
    Sdk_test(config, 'hello:cluster_xip_mram', checker=check_output, flags='CONFIG_XIP=1 CONFIG_HELLOWORLD_CLUSTER=1 CONFIG_BOOT_DEVICE=mram')
    Sdk_test(config, 'hello:xip_spi', checker=check_output, flags='CONFIG_XIP=1 CONFIG_BOOT_DEVICE=spiflash')
    Sdk_test(config, 'hello:cluster_xip_spi', checker=check_output, flags='CONFIG_XIP=1 CONFIG_HELLOWORLD_CLUSTER=1 CONFIG_BOOT_DEVICE=spiflash')
    Sdk_test(config, 'hello:spislave', checker=check_output, flags='CONFIG_BOOT_MODE=spislave')
    Sdk_test(config, 'hello:default_xtal_max', checker=check_output, flags='ENABLE_MAX_FAST_CLOCK=1 CONFIG_FAST_OSC_FREQUENCY=50000000')
    Sdk_test(config, 'hello:uart', checker=check_output, flags='io=uart')
    Sdk_test(config, 'hello:cluster_uart', checker=check_output, flags='CONFIG_HELLOWORLD_CLUSTER=1 io=uart')

    #
    # Test exclusion
    #
    if config.get('chip_family') == 'gap8':
        config.get_test('hello:jtag_no_efuse').exclude('Not relevant on Gap8')
        config.get_test('hello:jtag_force').exclude('Not relevant on Gap8')
        config.get_test('hello:jtag').exclude('Not relevant on Gap8')
        config.get_test('hello:mram') .exclude('Not relevant on Gap8')
        config.get_test('hello:spi').exclude('Not relevant on Gap8')
        config.get_test('hello:xip').exclude('Not relevant on Gap8')
        config.get_test('hello:cluster_xip').exclude('Not relevant on Gap8')
        config.get_test('hello:xip_mram').exclude('Not relevant on Gap8')
        config.get_test('hello:cluster_xip_mram').exclude('Not relevant on Gap8')
        config.get_test('hello:xip_spi').exclude('Not relevant on Gap8')
        config.get_test('hello:cluster_xip_spi').exclude('Not relevant on Gap8')
        config.get_test('hello:spislave').exclude('Not relevant on Gap8')
        config.get_test('hello:default_xal_max').exclude('Not relevant on Gap8')

    #
    # Test skipping
    #
    if config.get('platform') == 'gvsoc':
        config.get_test('hello:jtag_no_efuse').skip("No yet supported on GVSOC")
        config.get_test('hello:jtag_force').skip("No yet supported on GVSOC")
        config.get_test('hello:jtag').skip("No yet supported on GVSOC")
        config.get_test('hello:spi').skip("No yet supported on GVSOC")
        config.get_test('hello:xip_mram').skip("No yet supported on GVSOC")
        config.get_test('hello:cluster_xip_mram').skip("No yet supported on GVSOC")
        config.get_test('hello:xip_spi').skip("No yet supported on GVSOC")
        config.get_test('hello:cluster_xip_spi').skip("No yet supported on GVSOC")
        config.get_test('hello:spislave').skip("No yet supported on GVSOC")
        config.get_test('hello:default_xtal_max').skip("No yet supported on GVSOC")

    # TODO this could be activated on the board if minicom is returning the output
    if config.get('platform') == 'board':
        config.get_test('hello:uart').skip("No yet supported on board")
        config.get_test('hello:cluster_uart').skip("No yet supported on board")
