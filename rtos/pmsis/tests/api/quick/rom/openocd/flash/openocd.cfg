
debug_level 1

adapter driver remote_bitbang
remote_bitbang port $env(GAPY_OPENOCD_BITBANG_PORT)
remote_bitbang host localhost

reset_config srst_only srst_nogate

jtag newtap riscv cpu -irlen 5 -expected-id 0x20020bcb
jtag newtap riscv pulp -irlen 4 -expected-id 0x20021bcb

target create gap9.fc riscv -chain-position riscv.cpu -coreid 0x9 

jtag configure riscv.cpu -event setup {
     echo "Notify rom that openocd is there, bootvalue=[boot_value]"
     # bypadd debug
     irscan riscv.cpu 0x1f

     # branch in pulp tap, regconf
     irscan riscv.pulp 0x6
     drscan riscv.pulp 0x8 [boot_value]

     # bypass pulp tap
     irscan riscv.pulp 0xf
}

targets gap9.fc

gdb_report_data_abort enable
gdb_report_register_access_error enable
riscv set_reset_timeout_sec 120
riscv set_command_timeout_sec 120

# gap9.5 S mode does not have an MMU
riscv set_enable_virt2phys off
riscv set_enable_virtual off

poll_period 30000

echo "initializing taps and targets..."
init

echo "halt core, enable semihosting, rewind to bootloader, and restart"
# you may wonder why we rewind to bootloader.
# the answer: semihosting is not enabled, and the target will continue inside
# the program, will hit a semihost call when debug is not enabled.
# so we enable semihost and restart the program.
halt
reg pc 0x1A000080
arm semihosting enable
resume


# openocd will poll the end of test, and when found will quit.
echo "poll end of test ..."
set cont 1
while {$cont} {
      echo "polling ..."
      sleep 30000
      set v [read_memory 0x1A1040C0 32 1]
      echo "status: $v"
      if {[expr {$v >> 30}]} {
         echo "end of test reached"
	 set cont 0
      }
}

echo "openocd script is done and will exit"
exit