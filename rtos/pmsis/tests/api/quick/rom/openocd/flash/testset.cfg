from plptest import *

def check_output(config, output):

    if output.find('TOK') == -1:
        return (False, "Didn't find output string")

    return (True, None)

# Called by plptest to declare the tests
def get_tests(config):

    #
    # Test list decription
    #
    Sdk_test(config, 'hyperflash', checker=check_output,
        flags='io=host FLASH_TYPE=HYPERFLASH CONFIG_BOOT_DEVICE=hyperflash',
        run='run_dual RUN_CMD="make run %s io=host FLASH_TYPE=HYPERFLASH CONFIG_BOOT_DEVICE=hyperflash" OCD_CMD="make openocd_hyper"' % config.get_all_flags('hyperflash'))

    Sdk_test(config, 'spiflash', checker=check_output,
        flags='io=host FLASH_TYPE=SPIFLASH CONFIG_BOOT_DEVICE=spiflash',
        run='run_dual RUN_CMD="make run %s io=host FLASH_TYPE=SPIFLASH CONFIG_BOOT_DEVICE=spiflash" OCD_CMD="make openocd_spi"' % config.get_all_flags('spiflash'))

    Sdk_test(config, 'mram',  checker=check_output,
        flags='io=host FLASH_TYPE=MRAM CONFIG_BOOT_DEVICE=mram',
        run='run_dual RUN_CMD="make run %s io=host FLASH_TYPE=MRAM CONFIG_BOOT_DEVICE=mram" OCD_CMD="make openocd_mram"' % config.get_all_flags('mram'))

    #
    # Test skipping
    #
    if config.get('platform') == 'gvsoc':
        for test in config.get_tests():
            test.skip("No yet supported on GVSOC")
