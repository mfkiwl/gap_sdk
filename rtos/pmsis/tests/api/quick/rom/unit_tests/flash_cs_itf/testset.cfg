from plptest import *


def check_output(config, output):

    if output.find('Hello') == -1:
        return (False, "Didn't find output string")

    return (True, None)


# Called by plptest to declare the tests
def get_tests(config):

    #
    # Test list decription
    #
    Sdk_test(config, 'flash_cs_itf:hyper_cs0_itf0', flags='FLASH_ITF=0 FLASH_CS=0', checker=check_output)
    Sdk_test(config, 'flash_cs_itf:hyper_cs1_itf0', flags='FLASH_ITF=0 FLASH_CS=1', checker=check_output)
    Sdk_test(config, 'flash_cs_itf:hyper_cs0_itf1', flags='FLASH_ITF=1 FLASH_CS=0', checker=check_output)
    Sdk_test(config, 'flash_cs_itf:hyper_cs1_itf1', flags='FLASH_ITF=1 FLASH_CS=1', checker=check_output)
    Sdk_test(config, 'flash_cs_itf:spi_cs0_itf0', flags='CONFIG_BOOT_DEVICE=spiflash FLASH_ITF=0 FLASH_CS=0', checker=check_output)
    Sdk_test(config, 'flash_cs_itf:spi_cs1_itf0', flags='CONFIG_BOOT_DEVICE=spiflash FLASH_ITF=0 FLASH_CS=1', checker=check_output)
    Sdk_test(config, 'flash_cs_itf:spi_cs0_itf1', flags='CONFIG_BOOT_DEVICE=spiflash FLASH_ITF=1 FLASH_CS=0', checker=check_output)
    Sdk_test(config, 'flash_cs_itf:spi_cs1_itf1', flags='CONFIG_BOOT_DEVICE=spiflash FLASH_ITF=1 FLASH_CS=1', checker=check_output)

    #
    # Test skipping
    #
    if config.get('platform') == 'gvsoc':
        for test in config.get_tests():
            test.skip("No yet supported on GVSOC")
