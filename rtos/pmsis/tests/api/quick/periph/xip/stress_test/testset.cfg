from plptest import *


# Called by plptest to declare the tests
def get_tests(config):

    test_duration = config.get('test_duration')

    #
    # Test list decription
    #
    Sdk_test(config, 'stress_test:default',
        flags='CONFIG_XIP=1  TEST_DURATION=%s' % test_duration)

    Sdk_test(config, 'stress_test:mram',
        flags='CONFIG_XIP=1 FLASH_TYPE=MRAM CONFIG_BOOT_DEVICE=mram'
        ' TEST_DURATION=%s' % test_duration)

    Sdk_test(config, 'stress_test:spiflash',
        flags='CONFIG_XIP=1 FLASH_TYPE=SPIFLASH CONFIG_BOOT_DEVICE=spiflash RAM_TYPE=SPIRAM'
        ' TEST_DURATION=%s' % test_duration)

    Sdk_test(config, 'stress_test:default_with_idle',
        flags='SOC_IDLE=1 CONFIG_XIP=1 TEST_DURATION=%s' % test_duration)

    Sdk_test(config, 'stress_test:mram_with_idle',
        flags='SOC_IDLE=1 CONFIG_XIP=1 FLASH_TYPE=MRAM CONFIG_BOOT_DEVICE=mram'
        ' TEST_DURATION=%s' % test_duration)

    Sdk_test(config, 'stress_test:spiflash_with_idle',
        flags='SOC_IDLE=1 CONFIG_XIP=1 FLASH_TYPE=SPIFLASH CONFIG_BOOT_DEVICE=spiflash'
        ' RAM_TYPE=SPIRAM TEST_DURATION=%s' % test_duration)

    #
    # Test skipping
    #
    if config.get('platform') == 'gvsoc':
        for test in config.get_tests():
            test.skip("No yet supported on GVSOC")
