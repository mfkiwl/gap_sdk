from plptest import *


# Called by plptest to declare the tests
def get_tests(config):

    test_duration = config.get('test_duration')

    #
    # Test list decription
    #
    Sdk_test(config, 'send_1cs:sync_cs_auto', flags='TEST_CFLAGS=-DSYNC_CS_AUTO=1 TEST_DURATION=%s' % test_duration)

    Sdk_test(config, 'send_1cs:async_cs_auto', flags='TEST_CFLAGS=-DASYNC_CS_AUTO=1 TEST_DURATION=%s' % test_duration)
    
    Sdk_test(config, 'send_1cs:sync_cs_keep', flags='TEST_CFLAGS=-DSYNC_CS_KEEP=1 TEST_DURATION=%s' % test_duration)
    
    Sdk_test(config, 'send_1cs:async_cs_keep', flags='TEST_CFLAGS=-DASYNC_CS_KEEP=1 TEST_DURATION=%s' % test_duration)
    
    Sdk_test(config, 'send_1cs:async_cs_auto_quad', flags='TEST_CFLAGS=-DASYNC_CS_AUTO=1 QUAD=1 TEST_DURATION=%s' % test_duration)
    
    Sdk_test(config, 'send_1cs:async_cs_keep_quad', flags='TEST_CFLAGS=-DASYNC_CS_KEEP=1 QUAD=1 TEST_DURATION=%s' % test_duration)
    
    Sdk_test(config, 'send_1cs:async_cs_auto_quad_pol0_phase1', flags='TEST_CFLAGS=-DASYNC_CS_AUTO=1 QUAD=1 POLARITY=0 PHASE=1 TEST_DURATION=%s' % test_duration)
    
    Sdk_test(config, 'send_1cs:async_cs_auto_quad_pol1_phase0', flags='TEST_CFLAGS=-DASYNC_CS_AUTO=1 QUAD=1 POLARITY=1 PHASE=0 TEST_DURATION=%s' % test_duration)
    
    Sdk_test(config, 'send_1cs:async_cs_auto_quad_pol1_phase1', flags='TEST_CFLAGS=-DASYNC_CS_AUTO=1 QUAD=1 POLARITY=1 PHASE=1 TEST_DURATION=%s' % test_duration)

    #
    # Test exclusion
    #
    if config.get('chip_family') == 'gap8':
        config.get_test('send_1cs:async_cs_auto_quad').exclude('Not relevant on Gap8')
        config.get_test('send_1cs:async_cs_keep_quad').exclude('Not relevant on Gap8')
        config.get_test('send_1cs:async_cs_auto_quad_pol0_phase1').exclude('Not relevant on Gap8')
        config.get_test('send_1cs:async_cs_auto_quad_pol1_phase0').exclude('Not relevant on Gap8')
        config.get_test('send_1cs:async_cs_auto_quad_pol1_phase1').exclude('Not relevant on Gap8')

    #
    # Test skipping
    #
    if config.get('platform') == 'gvsoc':
        for test in config.get_tests():
            test.skip_test("No yet supported on GVSOC")