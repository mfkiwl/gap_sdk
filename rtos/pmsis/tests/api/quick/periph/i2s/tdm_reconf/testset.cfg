from plptest import *


# Called by plptest to declare the tests
def get_tests(config):

    test_duration = config.get('test_duration')

    #
    # Test list decription
    #
    Sdk_test(config, 'tdm_reconf:default', gen='gen', check='check',
        flags='RX_SLOTS=0x1 FULL_DUPLEX=1 ITFS=1 WORD_SIZE=32 ELEM_SIZE=4 EXT_CLKS=0 EXT_WSS=0'
        ' SAI0_CLKS=0 SAI0_WSS=0 CLK_POLS=0 WS_POLS=0 USE_FAST_CLK=0 TEST_DURATION=%s' % test_duration,
    )

    Sdk_test(config, 'tdm_reconf:ext_clk', gen='gen', check='check',
        flags='RX_SLOTS=0x1 FULL_DUPLEX=1 ITFS=1 WORD_SIZE=32 ELEM_SIZE=4 EXT_CLKS=1 EXT_WSS=0'
        ' SAI0_CLKS=0 SAI0_WSS=0 CLK_POLS=0 WS_POLS=0 USE_FAST_CLK=0 TEST_DURATION=%s' % test_duration,
    )

    Sdk_test(config, 'tdm_reconf:ext_ws', gen='gen', check='check',
        flags='RX_SLOTS=0x1 FULL_DUPLEX=1 ITFS=1 WORD_SIZE=32 ELEM_SIZE=4 EXT_CLKS=1 EXT_WSS=1'
        ' SAI0_CLKS=0 SAI0_WSS=0 CLK_POLS=0 WS_POLS=0 USE_FAST_CLK=0 TEST_DURATION=%s' % test_duration,
    )

    Sdk_test(config, 'tdm_reconf:ext_clk_ws', gen='gen', check='check',
        flags='RX_SLOTS=0x1 FULL_DUPLEX=1 ITFS=1 WORD_SIZE=32 ELEM_SIZE=4 EXT_CLKS=0 EXT_WSS=1'
        ' SAI0_CLKS=0 SAI0_WSS=0 CLK_POLS=0 WS_POLS=0 USE_FAST_CLK=0 TEST_DURATION=%s' % test_duration,
    )

    Sdk_test(config, 'tdm_reconf:fast_clk', gen='gen', check='check',
        flags='RX_SLOTS=0x1 FULL_DUPLEX=1 ITFS=1 WORD_SIZE=32 ELEM_SIZE=4 EXT_CLKS=0 EXT_WSS=0'
        ' SAI0_CLKS=0 SAI0_WSS=0 CLK_POLS=0 WS_POLS=0 USE_FAST_CLK=1 TEST_DURATION=%s' % test_duration,
    )

    Sdk_test(config, 'tdm_reconf:fast_clk_sai0_clk_ws', gen='gen', check='check',
        flags='RX_SLOTS=0x1 FULL_DUPLEX=1 ITFS=3 WORD_SIZE=32 ELEM_SIZE=4 EXT_CLKS=0 EXT_WSS=0'
        ' SAI0_CLKS=2 SAI0_WSS=2 CLK_POLS=0 WS_POLS=0 USE_FAST_CLK=0 TEST_DURATION=%s' % test_duration,
    )

    #
    # Test plan
    #
    config.get_test('tdm_reconf:default').add_testcase(
        Testcase(
            description='Check I2S RX on 1 slot on interface0 with dynamic reconfiguration.',
            category='udma:i2s',
            features=['Slot dynamic reconfiguration']
        ))

    config.get_test('tdm_reconf:ext_clk').add_testcase(
        Testcase(
            description='Check I2S RX on 1 slot on interface0 with dynamic reconfiguration and external clock.',
            category='udma:i2s',
            features=['Slot dynamic reconfiguration']
        ))

    config.get_test('tdm_reconf:ext_ws').add_testcase(
        Testcase(
            description='Check I2S RX on 1 slot on interface0 with dynamic reconfiguration and external WS.',
            category='udma:i2s',
            features=['Slot dynamic reconfiguration']
        ))

    config.get_test('tdm_reconf:ext_clk_ws').add_testcase(
        Testcase(
            description='Check I2S RX on 1 slot on interface0 with dynamic reconfiguration and external clock and WS.',
            category='udma:i2s',
            features=['Slot dynamic reconfiguration']
        ))

    config.get_test('tdm_reconf:fast_clk').add_testcase(
        Testcase(
            description='Check I2S RX on 1 slot on interface0 with dynamic reconfiguration and fast clock.',
            category='udma:i2s',
            features=['Slot dynamic reconfiguration']
        ))

    config.get_test('tdm_reconf:fast_clk_sai0_clk_ws').add_testcase(
        Testcase(
            description='Check I2S RX on 1 slot on interface0 with dynamic reconfiguration and SAI0 clock and WS propagation.',
            category='udma:i2s',
            features=['Slot dynamic reconfiguration']
        ))

    #
    # Test skipping
    #
    if config.get('platform') in ['board', 'fpga']:
        for test in config.get_tests():
            test.skip("No yet supported on board and fpga")
