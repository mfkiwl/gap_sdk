from plptest import *


# Called by plptest to declare the tests
def get_tests(config):

    test_duration = config.get('test_duration')

    #
    # Test list decription
    # 
    
    Sdk_test(config, 'simple:pcm_1tf', gen='gen',
        flags='PDM=0 NB_ITF=1'
    )
    
    Sdk_test(config, 'simple:pdm_1itf', gen='gen',
        flags='PDM=1 NB_ITF=1 TEST_DURATION=%s' % test_duration,
    )
    
    Sdk_test(config, 'simple:pdm_1itf_2ch', gen='gen',
        flags='PDM=1 NB_ITF=1 NB_CHANNELS=2 TEST_DURATION=%s' % test_duration,
    )
    
    Sdk_test(config, 'simple:pdm_2itf', gen='gen',
        flags='PDM=1 NB_ITF=2 TEST_DURATION=%s' % test_duration,
    )
    
    Sdk_test(config, 'simple:pdm_2itf_2ch', gen='gen',
        flags='PDM=1 NB_ITF=2 NB_CHANNELS=2 TEST_DURATION=%s' % test_duration,
    )
    
    Sdk_test(config, 'simple:pcm_1itf_2ch', gen='gen',
        flags='PDM=0 NB_ITF=1 NB_CHANNELS=2 TEST_DURATION=%s' % test_duration,
    )
    
    Sdk_test(config, 'simple:pcm_2tf', gen='gen',
        flags='PDM=0 NB_ITF=2 TEST_DURATION=%s' % test_duration,
    )
    
    Sdk_test(config, 'simple:pcm_2tf_2ch', gen='gen',
        flags='PDM=0 NB_ITF=2 NB_CHANNELS=2 TEST_DURATION=%s' % test_duration,
    )
    
    Sdk_test(config, 'simple:pcm_32_1itf', gen='gen',
        flags='PDM=0 NB_ITF=1 WORD_SIZE=32 TEST_DURATION=%s' % test_duration,
    )

    #
    # Test exclusion
    #
    if config.get('chip_family') != 'gap8':
        for test in config.get_tests():
            test.exclude('Not relevant on Gap8')

    #
    # Test skipping
    #
    if config.get('platform') in ['gvsoc', 'fpga', 'board']:
        for test in config.get_tests():
            test.skip("No yet supported on gvsoc, fpga and board")
