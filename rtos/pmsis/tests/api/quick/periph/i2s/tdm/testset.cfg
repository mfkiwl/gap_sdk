from plptest import *


# Called by plptest to declare the tests
def get_tests(config):

    test_duration = config.get('test_duration')

    #
    # Test list decription
    #
    Sdk_test(config, 'tdm_simple:master', gen='gen', check='check',
        flags='PDM=0 TDM=1 RX_ENABLED=0 TX_ENABLED=1 NB_ELEM=256 TEST_DURATION=%s' % test_duration,
    )

    Sdk_test(config, 'tdm_simple:tdm_rx_4ch_8b', gen='gen', check='check',
        flags='RX_ENABLED=1 TDM=1 TX_ENABLED=0 NB_CHANNELS=4 NB_ELEM=256 WORD_SIZE=8 TEST_DURATION=%s' % test_duration,
    )

    Sdk_test(config, 'tdm_simple:tdm_rx_4ch_16b', gen='gen', check='check',
        flags='RX_ENABLED=1 TDM=1 TX_ENABLED=0 NB_CHANNELS=4 NB_ELEM=256 WORD_SIZE=16 TEST_DURATION=%s' % test_duration,
    )

    Sdk_test(config, 'tdm_simple:tdm_rx_4ch_24b', gen='gen', check='check',
        flags='RX_ENABLED=1 TDM=1 TX_ENABLED=0 NB_CHANNELS=4 NB_ELEM=256 WORD_SIZE=24 TEST_DURATION=%s' % test_duration,
    )

    Sdk_test(config, 'tdm_simple:tdm_rx_4ch_32b', gen='gen', check='check',
        flags='RX_ENABLED=1 TDM=1 TX_ENABLED=0 NB_CHANNELS=4 NB_ELEM=256 WORD_SIZE=32 TEST_DURATION=%s' % test_duration,
    )

    # Sdk_test(config, 'tdm_simple:tdm_rx_4ch_8b_lsb', gen='gen', check='check',
    #     flags='RX_ENABLED=1 TDM=1 TX_ENABLED=0 NB_CHANNELS=4 NB_ELEM=256 WORD_SIZE=8 LSB=1 TEST_DURATION=%s' % test_duration,
    # )

    # Sdk_test(config, 'tdm_simple:tdm_rx_4ch_16b_lsb', gen='gen', check='check',
    #     flags='RX_ENABLED=1 TDM=1 TX_ENABLED=0 NB_CHANNELS=4 NB_ELEM=256 WORD_SIZE=16 LSB=1 TEST_DURATION=%s' % test_duration,
    # )

    # Sdk_test(config, 'tdm_simple:tdm_rx_4ch_32b_lsb', gen='gen', check='check',
    #     flags='RX_ENABLED=1 TDM=1 TX_ENABLED=0 NB_CHANNELS=4 NB_ELEM=256 WORD_SIZE=32 LSB=1 TEST_DURATION=%s' % test_duration,
    # )

    #
    # Test skipping
    #
    if config.get('platform') in ['gvsoc', 'fpga', 'board']:
        for test in config.get_tests():
            test.skip("No yet supported on gvsoc, fpga and board")
