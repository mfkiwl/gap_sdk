from plptest import *
import os

TestConfig = c = {}

def create_checker(num):
    def check_output(config, output):
        #print(output)
        if output.find('Recognized: %s' % num) == -1:
            return (False, "Didn't find output string")
        return (True, None)
    return check_output

def get_gvsoc_test(pkg, name, skip=None):
    pkg = "{}_{}".format(pkg, name)
    return Test(
        name = pkg,
        commands = [
            Shell('clean', 'make clean'),
            Shell('build', 'make all platform=gvsoc'),
            Shell('run',   'make run platform=gvsoc'),
            Check('check', create_checker(5))
        ],
        timeout=10000000,
        skip = skip
    )

def get_emul_test(pkg, name):
    pkg = "{}_{}".format(pkg, name)
    return Test(
        name = pkg,
        commands = [
            Shell('clean', 'make -f emul.mk clean'),
            Shell('build', 'make -f emul.mk all'),
            Shell('run',   './kws_emul'),
            Check('check', create_checker(6))
        ],
        timeout=1000000
    )

c['tests'] = [ ]
c['tests'].append(get_gvsoc_test('kws', 'gvsoc', skip="Failing with latest sdk"))

if os.environ.get('PLPTEST_PLATFORM') == 'emul':
    c['tests'].append(get_emul_test('kws', 'emul'))
